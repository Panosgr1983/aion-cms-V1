📁 Snapshot για: src
📍 Source Path: /Users/panagiotischoliasmenos/aion-cms-main/src
============================


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/categories/edit/[id]/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { mockFetchCategoryById, Category } from "@/app/lib/categoriesData";
import Breadcrumbs from "@/components/admin/Breadcrumbs";

export default function EditCategoryPage() {
  const router = useRouter();
  const params = useParams();
  const id = parseInt(params?.id as string, 10); // ✅ Χρήση useParams σωστά

  const [category, setCategory] = useState<Category | null>(null);
  const [name, setName] = useState("");
  const [slug, setSlug] = useState("");
  const [image, setImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [success, setSuccess] = useState(false);

  const generateSlug = (text: string) =>
    text
      .toLowerCase()
      .replace(/[άΆαΑ]/g, "a")
      .replace(/[έΈεΕ]/g, "e")
      .replace(/[ήΉηΗ]/g, "i")
      .replace(/[ίΊϊΐιΙ]/g, "i")
      .replace(/[όΌοΟ]/g, "o")
      .replace(/[ύΎϋΰυΥ]/g, "y")
      .replace(/[ώΏωΩ]/g, "o")
      .replace(/\s+/g, "-")
      .replace(/[^a-zA-Z0-9\-]/g, "");

  useEffect(() => {
    if (!id || isNaN(id)) return;

    mockFetchCategoryById(id).then((data) => {
      if (data) {
        setCategory(data);
        setName(data.name);
        setSlug(data.slug);
        setImagePreview(data.image || null);
      }
      setLoading(false);
    });
  }, [id]);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImage(file);
      const reader = new FileReader();
      reader.onload = (e) => setImagePreview(e.target?.result as string);
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    setTimeout(() => {
      const updatedCategory = {
        ...category,
        name,
        slug: slug || generateSlug(name),
        image: imagePreview,
      };

      console.log("🚀 Updated Category:", updatedCategory);
      setSuccess(true);
      showConfetti();

      setTimeout(() => {
        router.push("/admin/categories");
      }, 1500);

      setLoading(false);
    }, 800);
  };

  const showConfetti = () => {
    const confetti = document.createElement("div");
    confetti.innerText = "🎉";
    confetti.style.position = "fixed";
    confetti.style.fontSize = "3rem";
    confetti.style.top = "50%";
    confetti.style.left = "50%";
    confetti.style.transform = "translate(-50%, -50%)";
    document.body.appendChild(confetti);
    setTimeout(() => confetti.remove(), 1200);
  };

  if (loading) return <div className="text-center py-10 text-gray-500">Φόρτωση...</div>;
  if (!category) return <div className="text-center py-10 text-red-500">Η κατηγορία δεν βρέθηκε.</div>;

  return (
    <div className="max-w-2xl mx-auto my-10 px-4">
      <Breadcrumbs />
      <h1 className="text-3xl font-bold mb-6 text-gray-800">Επεξεργασία Κατηγορίας</h1>

      {success && (
        <div className="mb-6 p-4 bg-green-100 text-green-800 rounded-md">
          ✅ Η κατηγορία ενημερώθηκε με επιτυχία!
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Όνομα Κατηγορίας</label>
          <input
            value={name}
            onChange={(e) => {
              setName(e.target.value);
              setSlug(generateSlug(e.target.value));
            }}
            required
            className="w-full px-4 py-2 border border-gray-300 rounded shadow-sm focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Slug (URL)</label>
          <input
            value={slug}
            onChange={(e) => setSlug(generateSlug(e.target.value))}
            required
            className="w-full px-4 py-2 border border-gray-300 rounded shadow-sm focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Εικόνα</label>
          <div className="flex items-center gap-4">
            {imagePreview && (
              <img
                src={imagePreview}
                alt="Preview"
                className="w-24 h-24 object-cover rounded border"
              />
            )}
            <input type="file" accept="image/*" onChange={handleImageChange} />
          </div>
        </div>

        <div className="flex justify-between pt-4">
          <button
            type="button"
            onClick={() => router.back()}
            className="px-4 py-2 border border-gray-300 rounded text-gray-600 hover:bg-gray-50"
          >
            Ακύρωση
          </button>
          <button
            type="submit"
            disabled={loading}
            className={`px-6 py-2 text-white rounded ${
              loading ? "bg-blue-400" : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            {loading ? "Αποθήκευση..." : "Αποθήκευση"}
          </button>
        </div>
      </form>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/categories/new/page.tsx
----------------------------
"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import { showConfetti } from "@/lib/utils/showConfetti";
export default function NewCategoryPage() {
  const router = useRouter();
  const [name, setName] = useState("");
  const [slug, setSlug] = useState("");
  const [image, setImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [isSlugModified, setIsSlugModified] = useState(false);

  const generateSlug = (input: string) =>
    input
      .toLowerCase()
      .replace(/[άΆαΑ]/g, "a")
      .replace(/[έΈεΕ]/g, "e")
      .replace(/[ήΉηΗ]/g, "i")
      .replace(/[ίΊϊΐιΙ]/g, "i")
      .replace(/[όΌοΟ]/g, "o")
      .replace(/[ύΎϋΰυΥ]/g, "y")
      .replace(/[ώΏωΩ]/g, "o")
      .replace(/\s+/g, "-")
      .replace(/[^a-zA-Z0-9\-]/g, "");

  // Μοντελοποίηση ενός API call
  const saveCategory = async (categoryData: any): Promise<{ success: boolean; data: any }> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          success: true,
          data: { ...categoryData, id: Date.now() }
        });
      }, 800); // Προσομοίωση καθυστέρησης δικτύου
    });
  };

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newName = e.target.value;
    setName(newName);
    
    // Ενημέρωσε το slug μόνο αν δεν έχει τροποποιηθεί χειροκίνητα
    if (!isSlugModified) {
      setSlug(generateSlug(newName));
    }
  };

  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const rawValue = e.target.value;
    const sanitizedValue = generateSlug(rawValue);
    setSlug(sanitizedValue);
    setIsSlugModified(true);
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setImage(selectedFile);
      
      // Δημιουργία preview του εικόνας
      const reader = new FileReader();
      reader.onload = (event) => {
        setImagePreview(event.target?.result as string);
      };
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleResetSlug = () => {
    setSlug(generateSlug(name));
    setIsSlugModified(false);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!name.trim()) return;
    
    setLoading(true);
    
    // Δημιουργία αντικειμένου κατηγορίας
    const newCategory = {
      name,
      slug: slug || generateSlug(name),
      productCount: 0,
      image: imagePreview // Στην πραγματικότητα θα έπρεπε να ανεβεί στον server
    };
    
    try {
      // Κλήση του API (προσομοιωμένη)
      const response = await saveCategory(newCategory);
      
      if (response.success) {
        console.log("✅ Κατηγορία δημιουργήθηκε:", response.data);
        setSuccess(true);
        
        // Εμφάνιση confetti animation
        showConfetti();
        
        // Redirect μετά την επιτυχή αποθήκευση
        setTimeout(() => {
          router.push("/admin/categories");
        }, 1500);
      }
    } catch (error) {
      console.error("❌ Σφάλμα κατά τη δημιουργία κατηγορίας:", error);
      // Εδώ θα μπορούσαμε να προσθέσουμε ένα state για εμφάνιση σφάλματος
    } finally {
      setLoading(false);
    }
  };

  // Confetti animation (απλή υλοποίηση)
  const showConfetti = () => {
    const confettiCount = 100;
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100%';
    container.style.height = '100%';
    container.style.pointerEvents = 'none';
    container.style.zIndex = '9999';
    document.body.appendChild(container);

    for (let i = 0; i < confettiCount; i++) {
      const confetti = document.createElement('div');
      confetti.style.position = 'absolute';
      confetti.style.width = '10px';
      confetti.style.height = '10px';
      confetti.style.backgroundColor = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'][Math.floor(Math.random() * 4)];
      confetti.style.borderRadius = '50%';
      confetti.style.top = '0';
      confetti.style.left = Math.random() * 100 + '%';
      container.appendChild(confetti);

      const animation = confetti.animate(
        [
          { transform: 'translate3d(0, 0, 0)', opacity: 1 },
          { transform: `translate3d(${Math.random() * 100 - 50}px, ${Math.random() * 500 + 500}px, 0)`, opacity: 0 }
        ],
        {
          duration: 1000 + Math.random() * 1000,
          easing: 'cubic-bezier(0,0,0.2,1)'
        }
      );

      animation.onfinish = () => {
        confetti.remove();
        if (container.childElementCount === 0) {
          container.remove();
        }
      };
    }
  };

  // Ελέγχει αν το slug είναι έγκυρο
  const isSlugValid = slug.length > 0;

  return (
    <div className="max-w-2xl mx-auto my-8 px-4 sm:px-0">
    <Breadcrumbs />
      <div className="bg-white p-6 sm:p-8 rounded-lg shadow-md border border-gray-100">
        <h1 className="text-2xl sm:text-3xl font-bold mb-6 text-gray-800 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-7 w-7 mr-2 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
          Νέα Κατηγορία
        </h1>
        
        {success && (
          <div className="mb-6 p-4 bg-green-100 text-green-800 rounded-md flex items-center">
            <svg className="h-6 w-6 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span className="font-medium">Η κατηγορία δημιουργήθηκε επιτυχώς!</span>
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid sm:grid-cols-2 gap-6">
            <div className="sm:col-span-2">
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                Όνομα Κατηγορίας <span className="text-red-500">*</span>
              </label>
              <input
                id="name"
                type="text"
                value={name}
                required
                onChange={handleNameChange}
                className="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="π.χ. Ξηροί Καρποί"
              />
            </div>
            
            <div className="sm:col-span-2">
              <label htmlFor="slug" className="text-sm font-medium text-gray-700 mb-1 flex justify-between">
                <span>Slug (URL)</span>
                {isSlugModified && (
                  <button 
                    type="button" 
                    onClick={handleResetSlug}
                    className="text-xs text-blue-600 hover:text-blue-800"
                  >
                    Επαναφορά αυτόματου
                  </button>
                )}
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-500">
                  <span className="text-sm">melisa.gr/category/</span>
                </div>
                <input
                  id="slug"
                  type="text"
                  value={slug}
                  onChange={handleSlugChange}
                  className={`block w-full pl-32 pr-10 py-3 border ${
                    isSlugValid ? 'border-gray-300' : 'border-red-300'
                  } rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
                  placeholder="xiroi-karpoi"
                />
                {isSlugValid && (
                  <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                    <svg className="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                )}
              </div>
              <p className="mt-1 text-sm text-gray-500">
                Το slug χρησιμοποιείται στο URL της κατηγορίας και πρέπει να περιέχει μόνο
                λατινικούς χαρακτήρες, αριθμούς και παύλες.
              </p>
            </div>
            
            <div className="sm:col-span-2">
              <label htmlFor="image" className="block text-sm font-medium text-gray-700 mb-1">
                Εικόνα Κατηγορίας (προαιρετικό)
              </label>
              <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                {imagePreview ? (
                  <div className="text-center">
                    <div className="mb-4 relative mx-auto w-32 h-32">
                      {/* Εδώ θα έμπαινε το component Image της Next.js σε πραγματική εφαρμογή */}
                      <img
                        src={imagePreview}
                        alt="Category preview"
                        className="object-cover w-full h-full rounded-md"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setImage(null);
                          setImagePreview(null);
                        }}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition"
                      >
                        <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <p className="text-xs text-gray-500">{image?.name}</p>
                  </div>
                ) : (
                  <div className="space-y-1 text-center">
                    <svg
                      className="mx-auto h-12 w-12 text-gray-400"
                      stroke="currentColor"
                      fill="none"
                      viewBox="0 0 48 48"
                      aria-hidden="true"
                    >
                      <path
                        d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                        strokeWidth={2}
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                    <div className="flex text-sm text-gray-600">
                      <label
                        htmlFor="file-upload"
                        className="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none"
                      >
                        <span>Ανέβασμα αρχείου</span>
                        <input
                          id="file-upload"
                          name="file-upload"
                          type="file"
                          accept="image/*"
                          onChange={handleImageChange}
                          className="sr-only"
                        />
                      </label>
                      <p className="pl-1">ή σύρετε και αφήστε</p>
                    </div>
                    <p className="text-xs text-gray-500">PNG, JPG, GIF έως 2MB</p>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div className="flex justify-between items-center pt-4">
            <button
              type="button"
              onClick={() => router.back()}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Ακύρωση
            </button>
            
            <button
              type="submit"
              disabled={loading || !isSlugValid}
              className={`flex items-center justify-center px-6 py-2.5 rounded-md text-sm font-medium text-white ${
                loading || !isSlugValid
                  ? 'bg-blue-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700'
              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors min-w-[120px]`}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Αποθήκευση...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Αποθήκευση
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/categories/page.tsx
----------------------------
"use client";

// 📦 Hooks και components
import { useEffect, useState } from "react";
import Link from "next/link";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
// ✅ Ορισμός τύπου για κατηγορία
interface Category {
  id: number;
  name: string;
  slug: string;
  productCount: number;
}

export default function CategoriesPage() {
  // 🧠 Καταστάσεις: πλήρης λίστα, φιλτραρισμένη, φόρτωση, αναζήτηση
  const [categories, setCategories] = useState<Category[]>([]);
  const [filteredCategories, setFilteredCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  // 🚀 Φόρτωση δοκιμαστικών δεδομένων (θα αντικατασταθεί με fetch API στο μέλλον)
  useEffect(() => {
    const melisaCategories: Category[] = [
      { id: 1, name: "Ξηροί Καρποί", slug: "xiroi-karpoi", productCount: 12 },
      { id: 2, name: "Αποξηραμένα Φρούτα", slug: "apoxiremena-frouta", productCount: 9 },
      { id: 3, name: "Superfoods", slug: "superfoods", productCount: 5 },
      { id: 4, name: "Μπάρες και Granola", slug: "mpares-kai-granola", productCount: 4 },
      { id: 5, name: "Φρέσκοι Χυμοί", slug: "freskoi-xymoi", productCount: 6 },
      { id: 6, name: "Καφέδες", slug: "kafedes", productCount: 3 },
      { id: 7, name: "Κρασιά", slug: "krasia", productCount: 5 },
      { id: 8, name: "Καλάθια Δώρων", slug: "kalathia-doron", productCount: 4 },
      { id: 9, name: "Εποχιακά Γλυκά", slug: "epoxiaka-glyka", productCount: 2 },
      { id: 10, name: "Βελγικές Τρούφες", slug: "velgikes-troufes", productCount: 3 },
      { id: 11, name: "Γλυκά του Κουταλιού", slug: "glyka-tou-koutaliou", productCount: 2 },
      { id: 12, name: "Μαρμελάδες", slug: "marmelades", productCount: 3 },
      { id: 13, name: "Μέλια", slug: "melia", productCount: 6 },
      { id: 14, name: "Παραδοσιακά Γλυκά", slug: "paradosiaka-glyka", productCount: 5 },
      { id: 15, name: "Κάβα Ποτών", slug: "kava-poton", productCount: 7 },
    ];

    // ⏳ Προσομοίωση καθυστέρησης API
    const timer = setTimeout(() => {
      setCategories(melisaCategories);
      setFilteredCategories(melisaCategories);
      setLoading(false);
    }, 500);

    return () => clearTimeout(timer);
  }, []);

  // 🔍 Ενημέρωση φιλτραρισμένης λίστας βάσει όρου αναζήτησης
  useEffect(() => {
    const filtered = categories.filter((category) =>
      category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      category.slug.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredCategories(filtered);
  }, [searchTerm, categories]);

  // 🗑️ Διαγραφή κατηγορίας με επιβεβαίωση
  const handleDelete = (id: number) => {
    if (confirm("Θέλετε σίγουρα να διαγράψετε αυτή την κατηγορία;")) {
      const updated = categories.filter((c) => c.id !== id);
      setCategories(updated);
      setFilteredCategories(updated);
    }
  };

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-6">
      {/* 🧭 Breadcrumbs */}
      <Breadcrumbs />

      {/* ✅ Κεφαλίδα σελίδας και CTA */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800">Κατηγορίες Προϊόντων</h1>
        <Link
          href="/admin/categories/new"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
          Νέα Κατηγορία
        </Link>
      </div>

      {/* 🔍 Πεδίο αναζήτησης */}
      <div className="mb-6">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg className="w-5 h-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
            </svg>
          </div>
          <input
            type="text"
            placeholder="Αναζήτηση κατηγορίας..."
            className="pl-10 pr-4 py-2 border border-gray-300 rounded-md w-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        {/* 💡 Εμφάνιση αποτελεσμάτων */}
        {searchTerm && (
          <div className="mt-2 text-sm text-gray-600">
            Βρέθηκαν {filteredCategories.length} από {categories.length} κατηγορίες
          </div>
        )}
      </div>

      {/* ⏳ Ενδείξεις φόρτωσης ή περιεχόμενο */}
      {loading ? (
        <div className="flex justify-center items-center text-gray-500 py-16">
          <span className="animate-spin mr-3 h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full"></span>
          Φόρτωση κατηγοριών...
        </div>
      ) : filteredCategories.length === 0 ? (
        <div className="text-center text-gray-500 py-10">
          <p className="text-lg mb-2">Δεν βρέθηκαν κατηγορίες για την αναζήτησή σας</p>
          <button
            onClick={() => setSearchTerm("")}
            className="text-blue-600 hover:underline"
          >
            Καθαρισμός αναζήτησης
          </button>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200 text-sm">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left font-semibold text-gray-600 uppercase">Όνομα</th>
                <th className="px-6 py-3 text-left font-semibold text-gray-600 uppercase hidden sm:table-cell">Slug</th>
                <th className="px-6 py-3 text-left font-semibold text-gray-600 uppercase">Προϊόντα</th>
                <th className="px-6 py-3 text-right font-semibold text-gray-600 uppercase">Ενέργειες</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-100">
              {filteredCategories.map((category) => (
                <tr key={category.id} className="hover:bg-blue-50 transition">
                  <td className="px-6 py-4 font-medium text-gray-900">{category.name}</td>
                  <td className="px-6 py-4 text-gray-700 hidden sm:table-cell">{category.slug}</td>
                  <td className="px-6 py-4">
                    <span className={`px-2 inline-flex text-xs font-semibold rounded-full ${
                      category.productCount > 5 ? "bg-green-100 text-green-800" : "bg-blue-100 text-blue-800"
                    }`}>
                      {category.productCount} προϊόντα
                    </span>
                  </td>
                  <td className="px-6 py-4 text-right space-x-3">
                    <Link href={`/admin/categories/edit/${category.id}`} className="text-blue-600 hover:text-blue-800 text-sm">Επεξεργασία</Link>
                    <button
                      onClick={() => handleDelete(category.id)}
                      className="text-red-600 hover:text-red-800 text-sm"
                    >
                      Διαγραφή
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/continuum/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";

export default function ContinuumViewer() {
  const [files, setFiles] = useState<string[]>([]);

  useEffect(() => {
    fetch("/api/continuum/scan")
      .then((res) => res.json())
      .then((data) => setFiles(data.files));
  }, []);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-4">🧠 Continuum Log Viewer</h1>
      <ul className="bg-white p-4 rounded shadow text-sm">
        {files.map((file, i) => (
          <li key={i} className="py-1 border-b">{file}</li>
        ))}
      </ul>
    </div>
  );
}


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/dashboard/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import StatCard from "@/components/admin/cards/StatCard";
import AdminCard from "@/components/admin/cards/AdminCard";
import Breadcrumbs from "@/components/admin/Breadcrumbs";

export default function Dashboard() {
  const [stats, setStats] = useState({
    products: 0,
    categories: 0,
    media: 0,
  });

  useEffect(() => {
    // 🔌 Συνδέσου με API στο μέλλον
    setStats({
      products: 24,
      categories: 8,
      media: 56,
    });
  }, []);

  return (
    <div className="space-y-8 px-4 sm:px-6 lg:px-8 py-6">
      {/* Breadcrumbs */}
      <Breadcrumbs />

      {/* Τίτλος */}
      <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white">
        Dashboard
      </h1>

      {/* Στατιστικά */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatCard title="Προϊόντα" value={stats.products} />
        <StatCard title="Κατηγορίες" value={stats.categories} />
        <StatCard title="Αρχεία" value={stats.media} />
      </div>

      {/* Πρόσφατη Δραστηριότητα */}
      <AdminCard title="Πρόσφατη Δραστηριότητα">
        <p className="text-gray-500 dark:text-gray-400">
          Δεν υπάρχει καταγεγραμμένη δραστηριότητα ακόμα.
        </p>
      </AdminCard>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/layout.tsx
----------------------------
"use client";

import "@/app/globals.css";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import AdminSidebar from "@/components/admin/AdminSidebar";
import AdminHeader from "@/components/admin/AdminHeader";
import { ThemeProvider } from "@/components/theme/ThemeProvider";

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);
  const router = useRouter();

  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn");
    if (!isLoggedIn || isLoggedIn !== "true") {
      router.push("/login");
    } else {
      setIsAuthenticated(true);
    }
  }, [router]);

  if (isAuthenticated === null) {
    return (
      <div className="flex items-center justify-center h-screen text-gray-500">
        Loading admin panel...
      </div>
    );
  }

  return (
    <ThemeProvider>
      <div className="flex h-screen bg-[var(--aion-bg)] text-[var(--aion-fg)]">
        <AdminSidebar
          collapsed={sidebarOpen}
          toggleCollapse={() => setSidebarOpen(!sidebarOpen)}
        />
        <div className="flex-1 flex flex-col overflow-hidden">
          <AdminHeader toggleSidebar={() => setSidebarOpen(!sidebarOpen)} />
          <main className="flex-1 overflow-auto p-6">{children}</main>
        </div>
      </div>
    </ThemeProvider>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/login/page.tsx
----------------------------
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function LoginPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Απλός έλεγχος διαπιστευτηρίων (μόνο για εκπαιδευτικούς σκοπούς)
    if (username === 'admin' && password === 'admin123') {
      // Αποθήκευση κατάστασης σύνδεσης
      localStorage.setItem('isLoggedIn', 'true');
      // Ανακατεύθυνση στο dashboard
      router.push('/admin/dashboard');
    } else {
      setError('Λάθος όνομα χρήστη ή κωδικός πρόσβασης');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded shadow-md w-96">
        <h1 className="text-2xl font-bold mb-6 text-center">AION CMS</h1>
        <h2 className="text-xl mb-6 text-center">Σύνδεση</h2>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 mb-2" htmlFor="username">
              Όνομα χρήστη
            </label>
            <input
              id="username"
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-700 mb-2" htmlFor="password">
              Κωδικός πρόσβασης
            </label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition"
          >
            Σύνδεση
          </button>
        </form>
        
        <div className="mt-4 text-sm text-gray-600 text-center">
          <p>Για δοκιμή: username: admin, password: admin123</p>
        </div>
      </div>
    </div>
  );
}


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/media/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
import ImageUploader from "@/components/admin/ImageUploader";
import clsx from "clsx"; // Αν θες καθαρό toggling κλάσεων

// Τύπος αντικειμένου πολυμέσου
interface MediaItem {
  id: string;
  url: string;
  name: string;
  type: string;
  size: number;
  createdAt?: string;
}

export default function MediaPage() {
  const [mediaItems, setMediaItems] = useState<MediaItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [selected, setSelected] = useState<string[]>([]);
  const [search, setSearch] = useState("");

  // Προσομοίωση αρχικής φόρτωσης από API
  useEffect(() => {
    setTimeout(() => {
      setMediaItems([
        {
          id: "1",
          url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg",
          name: "sample.jpg",
          type: "image/jpeg",
          size: 123456,
          createdAt: "2025-04-01",
        },
        {
          id: "2",
          url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample2.jpg",
          name: "sample2.jpg",
          type: "image/jpeg",
          size: 234567,
          createdAt: "2025-04-02",
        },
      ]);
      setLoading(false);
    }, 500);
  }, []);

  // Φορμάτ μεγέθους
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1048576) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / 1048576).toFixed(1)} MB`;
  };

  // Ανέβασμα νέων αρχείων (mock)
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    setUploading(true);

    setTimeout(() => {
      const uploaded = Array.from(files).map((file, i) => ({
        id: `upload-${Date.now()}-${i}`,
        url: URL.createObjectURL(file),
        name: file.name,
        type: file.type,
        size: file.size,
        createdAt: new Date().toISOString(),
      }));
      setMediaItems((prev) => [...uploaded, ...prev]);
      setUploading(false);
    }, 1000);
  };

  // Επιλογή αρχείου για μαζικές ενέργειες
  const toggleSelect = (id: string) => {
    setSelected((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  // Μαζική διαγραφή
  const deleteSelected = () => {
    if (
      selected.length > 0 &&
      confirm(`Διαγραφή ${selected.length} αρχείων;`)
    ) {
      setMediaItems((prev) => prev.filter((item) => !selected.includes(item.id)));
      setSelected([]);
    }
  };

  // Διαγραφή μεμονωμένου
  const handleDelete = (id: string) => {
    if (confirm("Διαγραφή αρχείου;")) {
      setMediaItems((prev) => prev.filter((item) => item.id !== id));
    }
  };

  // Φιλτράρισμα με βάση αναζήτηση
  const filteredItems = mediaItems.filter((item) =>
    item.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="space-y-8">
      {/* Breadcrumbs */}
      <Breadcrumbs />

      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h1 className="text-2xl font-bold">Αρχεία Πολυμέσων</h1>

        <div className="flex gap-2">
          {selected.length > 0 && (
            <button
              onClick={deleteSelected}
              className="bg-red-600 hover:bg-red-700 text-white text-sm px-4 py-2 rounded transition"
            >
              Διαγραφή ({selected.length})
            </button>
          )}

          <label htmlFor="upload" className="cursor-pointer bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded transition">
            {uploading ? "Ανέβασμα..." : "Ανέβασμα"}
            <input
              id="upload"
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
            />
          </label>
        </div>
      </div>

      {/* Αναζήτηση */}
      <div>
        <input
          type="text"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Αναζήτηση αρχείων..."
          className="w-full px-4 py-2 border rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Πίνακας ή loading */}
      <AdminCard title="Συλλογή Αρχείων">
        {loading ? (
          <div className="text-center py-8 text-gray-500">Φόρτωση...</div>
        ) : filteredItems.length === 0 ? (
          <div className="text-center py-8 text-gray-500">Δεν βρέθηκαν αρχεία.</div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`bg-white border rounded overflow-hidden shadow hover:shadow-md transition relative cursor-pointer ${
                  selected.includes(item.id) ? "ring-2 ring-blue-500" : ""
                }`}
                onClick={() => toggleSelect(item.id)}
              >
                {/* Προεπισκόπηση */}
                <div className="h-40 bg-gray-100">
                  {item.type.startsWith("image/") ? (
                    <img
                      src={item.url}
                      alt={item.name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="flex items-center justify-center h-full text-gray-400">
                      {item.type}
                    </div>
                  )}
                </div>

                {/* Στοιχεία */}
                <div className="p-3">
                  <p className="text-sm font-medium truncate">{item.name}</p>
                  <p className="text-xs text-gray-500">
                    {formatFileSize(item.size)} ·{" "}
                    {item.createdAt &&
                      new Date(item.createdAt).toLocaleDateString("el-GR")}
                  </p>
                </div>

                {/* Διαγραφή */}
                <div className="absolute top-2 right-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDelete(item.id);
                    }}
                    className="text-xs text-red-600 hover:text-red-800"
                  >
                    ✕
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </AdminCard>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/products/edit/[id]/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
import { showConfetti } from "@/lib/utils/showConfetti";

interface MediaItem {
  id: string;
  name: string;
  url: string;
}

interface Product {
  id: number;
  name: string;
  slug: string;
  category: string;
  price: number;
  description?: string;
  image?: string;
}

export default function EditProductPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const productId = searchParams.get("id") || "1"; // Demo μόνο

  const [product, setProduct] = useState<Product | null>(null);
  const [name, setName] = useState("");
  const [slug, setSlug] = useState("");
  const [category, setCategory] = useState("");
  const [price, setPrice] = useState("");
  const [description, setDescription] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [filePreview, setFilePreview] = useState("");

  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false);
  const [success, setSuccess] = useState(false);
  const [mediaLibrary, setMediaLibrary] = useState<MediaItem[]>([]);

  
  useEffect(() => {
    // 🔁 Προσομοίωση fetch προϊόντος
    const fetchProduct = async () => {
      const fetched: Product = {
        id: Number(productId),
        name: "Καραμελωμένα Αμύγδαλα",
        slug: "karamelomena-amygdala",
        category: "Ξηροί Καρποί",
        price: 6.5,
        description: "Νόστιμα και τραγανά!",
        image: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg",
      };
      setProduct(fetched);
      setName(fetched.name);
      setSlug(fetched.slug);
      setCategory(fetched.category);
      setPrice(String(fetched.price));
      setDescription(fetched.description || "");
      setImageUrl(fetched.image || "");
    };

    // 📸 Dummy εικόνες
    setMediaLibrary([
      {
        id: "1",
        name: "almonds.jpg",
        url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg",
      },
      {
        id: "2",
        name: "mango.jpg",
        url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample2.jpg",
      },
    ]);

    fetchProduct();
  }, [productId]);

  useEffect(() => {
    if (!slugManuallyEdited) {
      const newSlug = name
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\w\s-]/g, "")
        .trim()
        .replace(/\s+/g, "-");
      setSlug(newSlug);
    }
  }, [name]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const previewUrl = URL.createObjectURL(file);
      setImageUrl("");
      setFilePreview(previewUrl);
    }
  };

  const handleImageSelect = (url: string) => {
    setFilePreview("");
    setImageUrl(url);
  };

  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSlug(e.target.value);
    setSlugManuallyEdited(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const priceValue = parseFloat(price);
    if (!name || !category || isNaN(priceValue) || priceValue <= 0) return;

    const updated: Product = {
      id: Number(productId),
      name,
      slug,
      category,
      price: priceValue,
      description,
      image: imageUrl || filePreview || "default.jpg",
    };

    console.log("📝 Προϊόν ανανεώθηκε (demo):", updated);
    setSuccess(true);
    setTimeout(() => router.push("/admin/products"), 1500);
  };

  if (!product) return <p className="text-center py-10">Φόρτωση προϊόντος...</p>;

  return (
    <div className="max-w-2xl mx-auto mt-10 px-4">
      <Breadcrumbs />
      <AdminCard title="Επεξεργασία Προϊόντος">
        {success && (
          <div className="mb-4 bg-green-100 text-green-800 px-4 py-2 rounded">
            ✅ Το προϊόν αποθηκεύτηκε επιτυχώς!
          </div>
        )}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block font-medium mb-1">Όνομα</label>
            <input
              className="w-full border px-3 py-2 rounded"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="flex justify-between font-medium mb-1">
              Slug
              {slugManuallyEdited && (
                <button
                  type="button"
                  onClick={() => {
                    setSlugManuallyEdited(false);
                    const autoSlug = name
                      .toLowerCase()
                      .normalize("NFD")
                      .replace(/[\u0300-\u036f]/g, "")
                      .replace(/[^\w\s-]/g, "")
                      .trim()
                      .replace(/\s+/g, "-");
                    setSlug(autoSlug);
                  }}
                  className="text-blue-600 text-xs hover:underline"
                >
                  Επαναφορά
                </button>
              )}
            </label>
            <input
              className="w-full border px-3 py-2 rounded"
              value={slug}
              onChange={handleSlugChange}
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Κατηγορία</label>
            <input
              className="w-full border px-3 py-2 rounded"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Τιμή (€)</label>
            <input
              type="number"
              className="w-full border px-3 py-2 rounded"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Περιγραφή</label>
            <textarea
              className="w-full border px-3 py-2 rounded"
              rows={3}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>

          <div>
            <label className="block font-medium mb-2">Εικόνα Προϊόντος</label>
            <input type="file" accept="image/*" onChange={handleFileChange} />

            <div className="flex gap-3 mt-3 overflow-x-auto">
              {mediaLibrary.map((media) => (
                <img
                  key={media.id}
                  src={media.url}
                  alt={media.name}
                  className={`w-16 h-16 object-cover rounded cursor-pointer border ${
                    imageUrl === media.url ? "ring-2 ring-blue-500" : "border-gray-300"
                  }`}
                  onClick={() => handleImageSelect(media.url)}
                />
              ))}
            </div>

            {(imageUrl || filePreview) && (
              <img
                src={imageUrl || filePreview}
                alt="preview"
                className="w-32 h-32 rounded mt-4 object-cover border"
              />
            )}
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
          >
            Αποθήκευση Αλλαγών
          </button>
        </form>
      </AdminCard>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/products/new/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
import { showConfetti } from "@/lib/utils/showConfetti";


// Dummy interface για το media library
interface MediaItem {
  id: string;
  name: string;
  url: string;
}

// 🔥 ΑION ULTRA EDITION - Νέο προϊόν με όλα
export default function NewProduct() {
  const router = useRouter();

  const [name, setName] = useState("");
  const [slug, setSlug] = useState("");
  const [category, setCategory] = useState("");
  const [price, setPrice] = useState("");
  const [description, setDescription] = useState("");

  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);

  const [mediaLibrary, setMediaLibrary] = useState<MediaItem[]>([]);
  const [imageUrl, setImageUrl] = useState("");
  const [filePreview, setFilePreview] = useState("");

  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false);

  // Auto-generate slug
  useEffect(() => {
    if (!slugManuallyEdited) {
      const newSlug = name
        .toLowerCase()
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // remove accents
        .replace(/[^\w\s-]/g, "")
        .trim()
        .replace(/\s+/g, "-");
      setSlug(newSlug);
    }
  }, [name]);

  // Demo media library preload
  useEffect(() => {
    setMediaLibrary([
      {
        id: "1",
        name: "almonds.jpg",
        url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg",
      },
      {
        id: "2",
        name: "mango.jpg",
        url: "https://res.cloudinary.com/demo/image/upload/v1312461204/sample2.jpg",
      },
    ]);
  }, []);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const previewUrl = URL.createObjectURL(file);
      setImageUrl("");
      setFilePreview(previewUrl);
    }
  };

  const handleImageSelect = (url: string) => {
    setFilePreview("");
    setImageUrl(url);
  };

  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSlug(e.target.value);
    setSlugManuallyEdited(true);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!name || !category || !price) {
      setError("Όλα τα υποχρεωτικά πεδία πρέπει να συμπληρωθούν.");
      return;
    }

    const priceValue = parseFloat(price);
    if (isNaN(priceValue) || priceValue <= 0) {
      setError("Η τιμή πρέπει να είναι θετικός αριθμός.");
      return;
    }

    const newProduct = {
      name,
      slug,
      category,
      price: priceValue,
      description,
      image: imageUrl || filePreview || "default.jpg",
    };

    console.log("🆕 Demo προϊόν:", newProduct);

    setSuccess(true);
    setTimeout(() => {
      router.push("/admin/products");
    }, 1500);
  };

  return (
    <div className="max-w-2xl mx-auto space-y-6 mt-10 px-4">
      <Breadcrumbs />
      <AdminCard title="Προσθήκη Νέου Προϊόντος">
        {error && (
          <div className="mb-4 bg-red-100 text-red-700 px-4 py-2 rounded">{error}</div>
        )}
        {success && (
          <div className="mb-4 bg-green-100 text-green-800 px-4 py-2 rounded font-medium">
            ✅ Το προϊόν αποθηκεύτηκε επιτυχώς!
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Όνομα */}
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700">
              Όνομα Προϊόντος <span className="text-red-500">*</span>
            </label>
            <input
              id="name"
              type="text"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm focus:ring focus:ring-blue-500"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          {/* Slug */}
          <div>
            <label htmlFor="slug" className="text-sm font-medium text-gray-700 flex justify-between">
              Slug URL
              {slugManuallyEdited && ( 
                <button
                  type="button"
                  className="text-xs text-blue-600 hover:underline"
                  onClick={() => {
                    setSlugManuallyEdited(false);
                    const autoSlug = name
                      .toLowerCase()
                      .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
                      .replace(/[^\w\s-]/g, "")
                      .trim()
                      .replace(/\s+/g, "-");
                    setSlug(autoSlug);
                  }}
                >
                  Επαναφορά αυτόματου
                </button>
              )}
            </label>
            <input
              id="slug"
              type="text"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm"
              value={slug}
              onChange={handleSlugChange}
            />
            <p className="text-xs text-gray-500 mt-1">Χρησιμοποιείται στο URL του προϊόντος.</p>
          </div>

          {/* Κατηγορία */}
          <div>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700">
              Κατηγορία <span className="text-red-500">*</span>
            </label>
            <select
              id="category"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              required
            >
              <option value="">Επιλέξτε κατηγορία</option>
              <option value="Ξηροί Καρποί">Ξηροί Καρποί</option>
              <option value="Αποξηραμένα Φρούτα">Αποξηραμένα Φρούτα</option>
              <option value="Superfoods">Superfoods</option>
              <option value="Καφέδες">Καφέδες</option>
              <option value="Κρασιά">Κρασιά</option>
              <option value="Μπάρες και Granola">Μπάρες και Granola</option>
              <option value="Φρέσκοι Χυμοί">Φρέσκοι Χυμοί</option>
            </select>
          </div>

          {/* Τιμή */}
          <div>
            <label htmlFor="price" className="block text-sm font-medium text-gray-700">
              Τιμή (€) <span className="text-red-500">*</span>
            </label>
            <input
              id="price"
              type="number"
              min="0"
              step="0.01"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              required
            />
          </div>

          {/* Περιγραφή */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700">
              Περιγραφή
            </label>
            <textarea
              id="description"
              rows={3}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded shadow-sm"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Προαιρετική περιγραφή για SEO, eshop κ.λπ."
            />
          </div>

          {/* Εικόνα */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Εικόνα Προϊόντος
            </label>

            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="text-sm"
            />

            <div className="flex gap-3 mt-2 overflow-x-auto">
              {mediaLibrary.map((media) => (
                <img
                  key={media.id}
                  src={media.url}
                  alt={media.name}
                  className={`w-16 h-16 object-cover rounded border cursor-pointer ${
                    imageUrl === media.url ? "ring-2 ring-blue-500" : "border-gray-300"
                  }`}
                  onClick={() => handleImageSelect(media.url)}
                />
              ))}
            </div>

            {(imageUrl || filePreview) && (
              <div className="mt-4">
                <p className="text-sm text-gray-600 mb-1">Προεπισκόπηση:</p>
                <img
                  src={imageUrl || filePreview}
                  alt="preview"
                  className="w-32 h-32 rounded object-cover border"
                />
              </div>
            )}
          </div>

          {/* Υποβολή */}
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition duration-300"
          >
            Αποθήκευση Προϊόντος
          </button>
        </form>
      </AdminCard>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/products/page.tsx
----------------------------
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";

interface Product {
  id: number;
  name: string;
  price: number;
  category?: string;
  image?: string;
}

export default function ProductsPage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const sample: Product[] = [
      { id: 1, name: "Καραμελωμένα Αμύγδαλα", price: 6.5, category: "Ξηροί Καρποί" },
      { id: 2, name: "Αμύγδαλα με Κακάο", price: 7.0, category: "Ξηροί Καρποί" },
      { id: 3, name: "Καρύδια", price: 6.9, category: "Ξηροί Καρποί" },
      { id: 4, name: "Αποξηραμένα Βερίκοκα", price: 5.5, category: "Αποξηραμένα Φρούτα" },
      { id: 5, name: "Αποξηραμένα Μάνγκο", price: 7.0, category: "Αποξηραμένα Φρούτα" },
      { id: 6, name: "Chia Seeds", price: 8.5, category: "Superfoods" },
      { id: 7, name: "Spirulina Powder", price: 9.99, category: "Superfoods" },
      { id: 8, name: "Granola με Μύρτιλλα", price: 4.99, category: "Μπάρες και Granola" },
      { id: 9, name: "Μπάρα Ενέργειας Με Σοκολάτα", price: 2.5, category: "Μπάρες και Granola" },
      { id: 10, name: "Χυμός Πορτοκάλι", price: 3.0, category: "Φρέσκοι Χυμοί" },
      { id: 11, name: "Χυμός Καρότο", price: 3.2, category: "Φρέσκοι Χυμοί" },
      { id: 12, name: "Καφές Espresso", price: 4.5, category: "Καφέδες" },
      { id: 13, name: "Καφές Φίλτρου", price: 3.5, category: "Καφέδες" },
      { id: 14, name: "Κρασί Ροζέ", price: 12.99, category: "Κρασιά" },
      { id: 15, name: "Κρασί Ερυθρό", price: 14.5, category: "Κρασιά" },
    ];

    const timer = setTimeout(() => {
      setProducts(sample);
      setLoading(false);
    }, 800);

    return () => clearTimeout(timer);
  }, []);

  const filtered = products.filter(
    (p) =>
      p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (p.category && p.category.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  return (
    <div className="space-y-8">
      <Breadcrumbs />

      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-800">Προϊόντα</h1>
        <Link
          href="/admin/products/new"
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          + Νέο Προϊόν
        </Link>
      </div>

      <div>
        <input
          type="text"
          placeholder="Αναζήτηση προϊόντων..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 rounded shadow-sm focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <AdminCard title="Λίστα Προϊόντων">
        {loading ? (
          <div className="text-center py-6 text-gray-500">Φόρτωση προϊόντων...</div>
        ) : (
          <table className="min-w-full divide-y divide-gray-200 text-sm">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left font-medium text-gray-600 uppercase tracking-wider">Προϊόν</th>
                <th className="px-6 py-3 text-left font-medium text-gray-600 uppercase tracking-wider">Κατηγορία</th>
                <th className="px-6 py-3 text-left font-medium text-gray-600 uppercase tracking-wider">Τιμή</th>
                <th className="px-6 py-3 text-right font-medium text-gray-600 uppercase tracking-wider">Ενέργειες</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-100">
              {filtered.map((product) => (
                <tr key={product.id} className="hover:bg-gray-50 transition">
                  <td className="px-6 py-4 font-medium text-gray-900">{product.name}</td>
                  <td className="px-6 py-4">
                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                      {product.category || "Χωρίς κατηγορία"}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-gray-700">{product.price.toFixed(2)} €</td>
                  <td className="px-6 py-4 text-right space-x-2">
                    <Link
                      href={`/admin/products/edit/${product.id}`}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      Επεξεργασία
                    </Link>
                    <button
                      onClick={() => {
                        if (confirm("Θέλετε σίγουρα να διαγράψετε αυτό το προϊόν;")) {
                          setProducts((prev) => prev.filter((p) => p.id !== product.id));
                        }
                      }}
                      className="text-red-600 hover:text-red-800"
                    >
                      Διαγραφή
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {filtered.length === 0 && !loading && (
          <div className="text-center py-6 text-gray-400">
            Δεν βρέθηκαν προϊόντα που να ταιριάζουν στην αναζήτησή σας.
          </div>
        )}
      </AdminCard>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/profile/page.tsx
----------------------------
"use client";

import { useState, useEffect } from "react";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
import { useTheme } from "@/components/theme/ThemeProvider";
import { showConfetti } from "@/lib/utils/showConfetti";

// src/app/admin/profile/page.tsx
import dynamic from "next/dynamic";

const ProfilePage = dynamic(() => import("@/components/admin/pages/ProfilePage"), { ssr: false });

export default function Page() {
  return <ProfilePage />;
}

// Τύπος για το προφίλ χρήστη
interface UserProfile {
  id: string;
  username: string;
  email: string;
  fullName: string;
  role: 'admin' | 'editor' | 'viewer';
  avatar?: string;
  phone?: string;
  bio?: string;
  language: string;
  notificationPreferences: {
    email: boolean;
    browser: boolean;
    system: boolean;
  };
  lastLogin: string;
  createdAt: string;
}

export default function ProfilePage() {
  const { theme } = useTheme();
  const [activeTab, setActiveTab] = useState<'general'|'security'|'preferences'>('general');
  const [isSaving, setIsSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);
  
  // Προσομοίωση φόρτωσης προφίλ από API
  const [profile, setProfile] = useState<UserProfile>({
    id: "usr_12345",
    username: "admin",
    email: "admin@aion-cms.com",
    fullName: "Διαχειριστής Συστήματος",
    role: "admin",
    avatar: "https://ui-avatars.com/api/?name=Admin+User&background=3b82f6&color=fff",
    phone: "+30 210 1234567",
    bio: "Κύριος διαχειριστής του AION CMS με πλήρη δικαιώματα συστήματος.",
    language: "el",
    notificationPreferences: {
      email: true,
      browser: true,
      system: false
    },
    lastLogin: "2025-04-22T10:30:00Z",
    createdAt: "2024-12-10T09:00:00Z"
  });

  // Χειρισμός αλλαγών στα πεδία
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    // Διαχείριση nested αντικειμένων
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      const parentKey = parent as keyof UserProfile;
      
      setProfile({
        ...profile,
        [parentKey]: {
          ...(profile[parentKey] as Record<string, any>),
          [child]: value
        }
      });
    } else {
      setProfile({
        ...profile,
        [name]: value
      });
    }
  };

  // Χειρισμός αλλαγών σε checkboxes
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    
    // Διαχείριση nested αντικειμένων
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      const parentKey = parent as keyof UserProfile;
      
      setProfile({
        ...profile,
        [parentKey]: {
          ...(profile[parentKey] as Record<string, any>),
          [child]: checked
        }
      });
    } else {
      setProfile({
        ...profile,
        [name]: checked
      });
    }
  };

  // Χειρισμός αλλαγής avatar
  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setAvatarPreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // Χειρισμός υποβολής φόρμας
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);
    
    // Προσομοίωση αποθήκευσης σε API
    setTimeout(() => {
      if (avatarPreview) {
        setProfile({
          ...profile,
          avatar: avatarPreview
        });
      }
      
      setIsSaving(false);
      setSaveSuccess(true);
      showConfetti();
      
      // Καθαρισμός μηνύματος επιτυχίας μετά από λίγο
      setTimeout(() => {
        setSaveSuccess(false);
      }, 3000);
    }, 800);
  };

  // Χειρισμός αλλαγής κωδικού
  const handlePasswordChange = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);
    
    // Προσομοίωση αποθήκευσης σε API
    setTimeout(() => {
      setIsSaving(false);
      setSaveSuccess(true);
      showConfetti();
      
      // Καθαρισμός μηνύματος επιτυχίας και πεδίων
      setTimeout(() => {
        setSaveSuccess(false);
        // Καθαρισμός πεδίων κωδικού
        const passwordForm = document.getElementById('password-form') as HTMLFormElement;
        if (passwordForm) passwordForm.reset();
      }, 3000);
    }, 800);
  };

  // Περιεχόμενο καρτέλας βάσει της ενεργής καρτέλας
  const renderTabContent = () => {
    switch (activeTab) {
      case 'general':
        return (
          <div className="space-y-6">
            {/* Avatar Επιλογή */}
            <div className="flex flex-col items-center sm:flex-row sm:items-start gap-6">
              <div className="relative">
                <img 
                  src={avatarPreview || profile.avatar || "https://ui-avatars.com/api/?name=User&background=3b82f6&color=fff"}
                  alt="Προφίλ"
                  className="h-32 w-32 rounded-full object-cover border-4 border-white shadow-md"
                />
                <label htmlFor="avatar-upload" className="absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full cursor-pointer shadow-md hover:bg-blue-700 transition">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <input 
                    id="avatar-upload" 
                    type="file" 
                    accept="image/*" 
                    onChange={handleAvatarChange} 
                    className="hidden" 
                  />
                </label>
              </div>
              
              <div className="space-y-4 flex-1">
                <div>
                  <label htmlFor="fullName" className="block text-sm font-medium mb-1">
                    Ονοματεπώνυμο
                  </label>
                  <input
                    id="fullName"
                    name="fullName"
                    type="text"
                    value={profile.fullName}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label htmlFor="bio" className="block text-sm font-medium mb-1">
                    Σύντομο Βιογραφικό
                  </label>
                  <textarea
                    id="bio"
                    name="bio"
                    value={profile.bio || ""}
                    onChange={handleChange}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="username" className="block text-sm font-medium mb-1">
                  Όνομα Χρήστη
                </label>
                <input
                  id="username"
                  name="username"
                  type="text"
                  value={profile.username}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
              
              <div>
                <label htmlFor="email" className="block text-sm font-medium mb-1">
                  Email
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  value={profile.email}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
              
              <div>
                <label htmlFor="phone" className="block text-sm font-medium mb-1">
                  Τηλέφωνο
                </label>
                <input
                  id="phone"
                  name="phone"
                  type="tel"
                  value={profile.phone || ""}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  placeholder="+30 210 1234567"
                />
              </div>
              
              <div>
                <label htmlFor="language" className="block text-sm font-medium mb-1">
                  Γλώσσα
                </label>
                <select
                  id="language"
                  name="language"
                  value={profile.language}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                >
                  <option value="el">Ελληνικά</option>
                  <option value="en">English</option>
                  <option value="fr">Français</option>
                  <option value="de">Deutsch</option>
                </select>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Στοιχεία Λογαριασμού</h3>
                <span className="px-3 py-1 inline-flex text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                  {profile.role === 'admin' ? 'Διαχειριστής' : 
                   profile.role === 'editor' ? 'Συντάκτης' : 'Επισκέπτης'}
                </span>
              </div>
              
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="block text-gray-500">ID Χρήστη</span>
                  <span>{profile.id}</span>
                </div>
                <div>
                  <span className="block text-gray-500">Τελευταία Σύνδεση</span>
                  <span>{new Date(profile.lastLogin).toLocaleString('el-GR')}</span>
                </div>
                <div>
                  <span className="block text-gray-500">Ημερομηνία Δημιουργίας</span>
                  <span>{new Date(profile.createdAt).toLocaleString('el-GR')}</span>
                </div>
              </div>
            </div>
          </div>
        );
      
      case 'security':
        return (
          <div className="space-y-6">
            <form id="password-form" onSubmit={handlePasswordChange} className="space-y-6">
              <h3 className="text-lg font-medium">Αλλαγή Κωδικού</h3>
              
              <div>
                <label htmlFor="currentPassword" className="block text-sm font-medium mb-1">
                  Τρέχων Κωδικός
                </label>
                <input
                  id="currentPassword"
                  name="currentPassword"
                  type="password"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
              
              <div>
                <label htmlFor="newPassword" className="block text-sm font-medium mb-1">
                  Νέος Κωδικός
                </label>
                <input
                  id="newPassword"
                  name="newPassword"
                  type="password"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
                <p className="mt-1 text-sm text-gray-500">
                  Ο κωδικός πρέπει να έχει τουλάχιστον 8 χαρακτήρες με γράμματα, αριθμούς και σύμβολα.
                </p>
              </div>
              
              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium mb-1">
                  Επιβεβαίωση Νέου Κωδικού
                </label>
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
              
              <div>
                <button
                  type="submit"
                  disabled={isSaving}
                  className={`px-4 py-2 rounded-md text-white transition ${
                    isSaving ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
                  }`}
                >
                  {isSaving ? 'Αποθήκευση...' : 'Αλλαγή Κωδικού'}
                </button>
              </div>
            </form>
            
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium mb-4">Ασφάλεια Λογαριασμού</h3>
              
              <div className="space-y-4">
                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <input
                      id="twoFactorAuth"
                      name="twoFactorAuth"
                      type="checkbox"
                      className="h-4 w-4 text-blue-600 rounded border-gray-300"
                    />
                  </div>
                  <div className="ml-3 text-sm">
                    <label htmlFor="twoFactorAuth" className="font-medium">
                      Ενεργοποίηση Two-Factor Authentication (2FA)
                    </label>
                    <p className="text-gray-500">
                      Ενισχύστε την ασφάλεια του λογαριασμού σας απαιτώντας έναν κωδικό επαλήθευσης μιας χρήσης κατά τη σύνδεση.
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start">
                  <div className="flex items-center h-5">
                    <input
                      id="notifyLogin"
                      name="notifyLogin"
                      type="checkbox"
                      className="h-4 w-4 text-blue-600 rounded border-gray-300"
                    />
                  </div>
                  <div className="ml-3 text-sm">
                    <label htmlFor="notifyLogin" className="font-medium">
                      Ειδοποίηση για νέες συνδέσεις
                    </label>
                    <p className="text-gray-500">
                      Λήψη ειδοποίησης όταν ο λογαριασμός σας συνδέεται από μια νέα συσκευή ή τοποθεσία.
                    </p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium mb-2 text-red-600">Επικίνδυνη Ζώνη</h3>
              
              <p className="text-sm text-gray-500 mb-4">
                Οι ενέργειες σε αυτήν την ενότητα είναι μη αναστρέψιμες και θα πρέπει να γίνονται με προσοχή.
              </p>
              
              <button
                type="button"
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition"
              >
                Διαγραφή Λογαριασμού
              </button>
            </div>
          </div>
        );
      
      case 'preferences':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium">Ειδοποιήσεις</h3>
            
            <div className="space-y-4">
              <div className="flex items-start">
                <div className="flex items-center h-5">
                  <input
                    id="notificationPreferences.email"
                    name="notificationPreferences.email"
                    type="checkbox"
                    checked={profile.notificationPreferences.email}
                    onChange={handleCheckboxChange}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                </div>
                <div className="ml-3 text-sm">
                  <label htmlFor="notificationPreferences.email" className="font-medium">
                    Ειδοποιήσεις μέσω Email
                  </label>
                  <p className="text-gray-500">
                    Λήψη ειδοποιήσεων για ενημερώσεις και δραστηριότητες του συστήματος στο email σας.
                  </p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex items-center h-5">
                  <input
                    id="notificationPreferences.browser"
                    name="notificationPreferences.browser"
                    type="checkbox"
                    checked={profile.notificationPreferences.browser}
                    onChange={handleCheckboxChange}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                </div>
                <div className="ml-3 text-sm">
                  <label htmlFor="notificationPreferences.browser" className="font-medium">
                    Ειδοποιήσεις προγράμματος περιήγησης
                  </label>
                  <p className="text-gray-500">
                    Λήψη push ειδοποιήσεων στο πρόγραμμα περιήγησής σας όταν είστε online.
                  </p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex items-center h-5">
                  <input
                    id="notificationPreferences.system"
                    name="notificationPreferences.system"
                    type="checkbox"
                    checked={profile.notificationPreferences.system}
                    onChange={handleCheckboxChange}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                </div>
                <div className="ml-3 text-sm">
                  <label htmlFor="notificationPreferences.system" className="font-medium">
                    Ειδοποιήσεις συστήματος
                  </label>
                  <p className="text-gray-500">
                    Λήψη ειδοποιήσεων για ζητήματα ασφαλείας και κρίσιμες ενημερώσεις.
                  </p>
                </div>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium mb-4">Προτιμήσεις Απεικόνισης</h3>
              
              <div>
                <label htmlFor="uiDensity" className="block text-sm font-medium mb-1">
                  Πυκνότητα Διεπαφής
                </label>
                <select
                  id="uiDensity"
                  name="uiDensity"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                >
                  <option value="compact">Συμπαγής</option>
                  <option value="normal" selected>Κανονική</option>
                  <option value="comfortable">Άνετη</option>
                </select>
                <p className="mt-1 text-sm text-gray-500">
                  Προσαρμόστε πόσο συμπαγής εμφανίζεται το περιεχόμενο στη διεπαφή.
                </p>
              </div>
              
              <div className="mt-4">
                <label htmlFor="dateFormat" className="block text-sm font-medium mb-1">
                  Μορφή Ημερομηνίας
                </label>
                <select
                  id="dateFormat"
                  name="dateFormat"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                >
                  <option value="dd/mm/yyyy">ΗΗ/ΜΜ/ΕΕΕΕ (30/04/2025)</option>
                  <option value="mm/dd/yyyy">ΜΜ/ΗΗ/ΕΕΕΕ (04/30/2025)</option>
                  <option value="yyyy-mm-dd">ΕΕΕΕ-ΜΜ-ΗΗ (2025-04-30)</option>
                </select>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium mb-4">Εξαγωγή Δεδομένων</h3>
              
              <p className="text-sm text-gray-500 mb-4">
                Εξαγωγή των προσωπικών σας δεδομένων σε μορφή CSV ή JSON.
              </p>
              
              <div className="space-x-3">
                <button
                  type="button"
                  className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition"
                >
                  Εξαγωγή ως CSV
                </button>
                <button
                  type="button"
                  className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition"
                >
                  Εξαγωγή ως JSON
                </button>
              </div>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <Breadcrumbs />
      
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white">
          Το Προφίλ μου
        </h1>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* Sidebar με τις καρτέλες */}
        <div className="w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
          <nav className="flex flex-col">
            <button
              onClick={() => setActiveTab('general')}
              className={`px-4 py-3 text-left ${
                activeTab === 'general' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
                Γενικές Πληροφορίες
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('security')}
              className={`px-4 py-3 text-left ${
                activeTab === 'security' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                </svg>
                Ασφάλεια
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('preferences')}
              className={`px-4 py-3 text-left ${
                activeTab === 'preferences' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
              <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
  <path
    fillRule="evenodd"
    d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
    clipRule="evenodd"
  />
</svg>
                Προτιμήσεις
              </div>
            </button>
          </nav>
        </div>
        
        {/* Περιεχόμενο καρτέλας */}
        <div className="flex-1">
          <AdminCard>
            <form onSubmit={handleSubmit}>
              {/* Εμφάνιση επιτυχούς αποθήκευσης */}
              {saveSuccess && (
                <div className="mb-6 bg-green-50 border-l-4 border-green-500 p-4 text-green-700">
                  <div className="flex">
                    <svg className="h-5 w-5 text-green-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <p>Οι αλλαγές αποθηκεύτηκαν επιτυχώς!</p>
                  </div>
                </div>
              )}
              
              {/* Περιεχόμενο ενεργής καρτέλας */}
              {renderTabContent()}
              
              {/* Κουμπιά φόρμας (εμφανίζονται μόνο στο General tab) */}
              {activeTab === 'general' && (
                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 mt-8">
                  <button
                    type="button"
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition"
                  >
                    Ακύρωση
                  </button>
                  <button
                    type="submit"
                    disabled={isSaving}
                    className={`px-4 py-2 rounded-md text-white transition ${
                      isSaving ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    {isSaving ? (
                      <span className="flex items-center">
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Αποθήκευση...
                      </span>
                    ) : (
                      'Αποθήκευση'
                    )}
                  </button>
                </div>
              )}
              
              {/* Κουμπιά φόρμας για τις Προτιμήσεις */}
              {activeTab === 'preferences' && (
                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 mt-8">
                  <button
                    type="button"
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition"
                  >
                    Ακύρωση
                  </button>
                  <button
                    type="submit"
                    disabled={isSaving}
                    className={`px-4 py-2 rounded-md text-white transition ${
                      isSaving ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    {isSaving ? 'Αποθήκευση...' : 'Αποθήκευση'}
                  </button>
                </div>
              )}
            </form>
          </AdminCard>
        </div>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/admin/settings/page.tsx
----------------------------
"use client";

import { useState } from "react";
import Breadcrumbs from "@/components/admin/Breadcrumbs";
import AdminCard from "@/components/admin/cards/AdminCard";
import { useTheme } from "@/components/theme/ThemeProvider";
import { showConfetti } from "@/lib/utils/showConfetti";

// Τύπος για τις ρυθμίσεις
interface SiteSettings {
  siteName: string;
  siteDescription: string;
  contactEmail: string;
  enableDarkMode: boolean;
  currency: string;
  showPricesWithTax: boolean;
  vatRate: number;
  logoUrl: string;
  faviconUrl: string;
  socialLinks: {
    facebook: string;
    instagram: string;
    twitter: string;
  };
  analytics: {
    googleAnalyticsId: string;
    enabledTracking: boolean;
  };
  }


export default function SettingsPage() {
  const { theme, setTheme } = useTheme();
  const [activeTab, setActiveTab] = useState<'general'|'shop'|'appearance'|'users'|'seo'>('general');
  const [isSaving, setIsSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  
  // Προσομοίωση φόρτωσης ρυθμίσεων από API
  const [settings, setSettings] = useState<SiteSettings>({
    siteName: "AION E-Shop",
    siteDescription: "Προϊόντα υψηλής ποιότητας για όλους",
    contactEmail: "info@aion-shop.gr",
    enableDarkMode: false,
    currency: "EUR",
    showPricesWithTax: true,
    vatRate: 24,
    logoUrl: "/logo.png",
    faviconUrl: "/favicon.ico",
    socialLinks: {
      facebook: "https://facebook.com/aionshop",
      instagram: "https://instagram.com/aionshop",
      twitter: "https://twitter.com/aionshop"
    },
    analytics: {
      googleAnalyticsId: "G-XXXXXXXXXX",
      enabledTracking: true
    }
  });

  // Χειρισμός αλλαγών στα πεδία
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    // Διαχείριση nested αντικειμένων
if (name.includes('.')) {
  const [parent, child] = name.split('.');
  
  // Βεβαιωνόμαστε ότι το parent είναι κλειδί του SiteSettings
  const parentKey = parent as keyof SiteSettings;
  
  // Χρησιμοποιούμε type assertion για να διασφαλίσουμε ότι το TypeScript ξέρει ότι είναι αντικείμενο
  setSettings({
    ...settings,
    [parentKey]: {
      ...(settings[parentKey] as Record<string, any>),
      [child]: value
    }
  });
} else {
  setSettings({
    ...settings,
    [name]: value
  });
}
}; // <- Αυτό το κλείσιμο έλειπε
  // Χειρισμός αλλαγών σε checkboxes
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    
   // Διαχείριση nested αντικειμένων για checkboxes
if (name.includes('.')) {
  const [parent, child] = name.split('.');
  
  // Βεβαιωνόμαστε ότι το parent είναι κλειδί του SiteSettings
  const parentKey = parent as keyof SiteSettings;
  
  // Χρησιμοποιούμε type assertion για να διασφαλίσουμε ότι το TypeScript αναγνωρίζει το αντικείμενο
  setSettings({
    ...settings,
    [parentKey]: {
      ...(settings[parentKey] as Record<string, any>),
      [child]: checked
    }
  });
} else {
  setSettings({
    ...settings,
    [name]: checked
  });
}
}; // <- Αυτό το κλείσιμο έλειπε

  // Χειρισμός υποβολής φόρμας
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);
    
    // Προσομοίωση αποθήκευσης σε API
    setTimeout(() => {
      setIsSaving(false);
      setSaveSuccess(true);
      showConfetti();
      
      // Καθαρισμός μηνύματος επιτυχίας μετά από λίγο
      setTimeout(() => {
        setSaveSuccess(false);
      }, 3000);
    }, 800);
  };

  // Περιεχόμενο καρτέλας βάσει της ενεργής καρτέλας
  const renderTabContent = () => {
    switch (activeTab) {
      case 'general':
        return (
          <div className="space-y-6">
            <div>
              <label htmlFor="siteName" className="block text-sm font-medium mb-1">
                Όνομα Ιστότοπου
              </label>
              <input
                id="siteName"
                name="siteName"
                type="text"
                value={settings.siteName}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div>
              <label htmlFor="siteDescription" className="block text-sm font-medium mb-1">
                Περιγραφή Ιστότοπου
              </label>
              <textarea
                id="siteDescription"
                name="siteDescription"
                value={settings.siteDescription}
                onChange={handleChange}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div>
              <label htmlFor="contactEmail" className="block text-sm font-medium mb-1">
                Email Επικοινωνίας
              </label>
              <input
                id="contactEmail"
                name="contactEmail"
                type="email"
                value={settings.contactEmail}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div className="border-t border-gray-200 pt-4">
              <h3 className="text-lg font-medium mb-3">Κοινωνικά Δίκτυα</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label htmlFor="socialLinks.facebook" className="block text-sm font-medium mb-1">
                    Facebook
                  </label>
                  <input
                    id="socialLinks.facebook"
                    name="socialLinks.facebook"
                    type="url"
                    value={settings.socialLinks.facebook}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label htmlFor="socialLinks.instagram" className="block text-sm font-medium mb-1">
                    Instagram
                  </label>
                  <input
                    id="socialLinks.instagram"
                    name="socialLinks.instagram"
                    type="url"
                    value={settings.socialLinks.instagram}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label htmlFor="socialLinks.twitter" className="block text-sm font-medium mb-1">
                    Twitter
                  </label>
                  <input
                    id="socialLinks.twitter"
                    name="socialLinks.twitter"
                    type="url"
                    value={settings.socialLinks.twitter}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>
          </div>
        );
        
      case 'shop':
        return (
          <div className="space-y-6">
            <div>
              <label htmlFor="currency" className="block text-sm font-medium mb-1">
                Νόμισμα
              </label>
              <select
                id="currency"
                name="currency"
                value={settings.currency}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              >
                <option value="EUR">Euro (€)</option>
                <option value="USD">US Dollar ($)</option>
                <option value="GBP">British Pound (£)</option>
              </select>
            </div>
            
            <div className="flex items-center">
              <input
                id="showPricesWithTax"
                name="showPricesWithTax"
                type="checkbox"
                checked={settings.showPricesWithTax}
                onChange={handleCheckboxChange}
                className="h-4 w-4 text-blue-600 rounded border-gray-300"
              />
              <label htmlFor="showPricesWithTax" className="ml-2 block text-sm font-medium">
                Εμφάνιση τιμών με ΦΠΑ
              </label>
            </div>
            
            <div>
              <label htmlFor="vatRate" className="block text-sm font-medium mb-1">
                Συντελεστής ΦΠΑ (%)
              </label>
              <input
                id="vatRate"
                name="vatRate"
                type="number"
                min="0"
                max="100"
                value={settings.vatRate}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div className="border-t border-gray-200 pt-4">
              <h3 className="text-lg font-medium mb-3">Analytics</h3>
              
              <div className="space-y-4">
                <div>
                  <label htmlFor="analytics.googleAnalyticsId" className="block text-sm font-medium mb-1">
                    Google Analytics ID
                  </label>
                  <input
                    id="analytics.googleAnalyticsId"
                    name="analytics.googleAnalyticsId"
                    type="text"
                    value={settings.analytics.googleAnalyticsId}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div className="flex items-center">
                  <input
                    id="analytics.enabledTracking"
                    name="analytics.enabledTracking"
                    type="checkbox"
                    checked={settings.analytics.enabledTracking}
                    onChange={handleCheckboxChange}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                  <label htmlFor="analytics.enabledTracking" className="ml-2 block text-sm font-medium">
                    Ενεργοποίηση παρακολούθησης analytics
                  </label>
                </div>
              </div>
            </div>
          </div>
        );
        
      case 'appearance':
        return (
          <div className="space-y-6">
            <div>
              <label htmlFor="logoUrl" className="block text-sm font-medium mb-1">
                URL Λογότυπου
              </label>
              <div className="flex items-center gap-4">
                {settings.logoUrl && (
                  <img
                    src={settings.logoUrl}
                    alt="Logo Preview"
                    className="h-10 w-auto object-contain border rounded p-1"
                  />
                )}
                <input
                  id="logoUrl"
                  name="logoUrl"
                  type="text"
                  value={settings.logoUrl}
                  onChange={handleChange}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                />
                <button
                  type="button"
                  className="px-3 py-2 bg-gray-200 text-gray-700 rounded"
                >
                  Επιλογή
                </button>
              </div>
            </div>
            
            <div>
              <label htmlFor="faviconUrl" className="block text-sm font-medium mb-1">
                URL Favicon
              </label>
              <div className="flex items-center gap-4">
                {settings.faviconUrl && (
                  <img
                    src={settings.faviconUrl}
                    alt="Favicon Preview"
                    className="h-8 w-auto object-contain border rounded p-1"
                  />
                )}
                <input
                  id="faviconUrl"
                  name="faviconUrl"
                  type="text"
                  value={settings.faviconUrl}
                  onChange={handleChange}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                />
                <button
                  type="button"
                  className="px-3 py-2 bg-gray-200 text-gray-700 rounded"
                >
                  Επιλογή
                </button>
              </div>
            </div>
            
            <div className="border-t border-gray-200 pt-4">
              <h3 className="text-lg font-medium mb-3">Εμφάνιση</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 border border-gray-200 rounded-md">
                  <div>
                    <h4 className="font-medium">Λειτουργία Σκοτεινού Θέματος</h4>
                    <p className="text-sm text-gray-500">Επιλέξτε το προεπιλεγμένο θέμα του ιστότοπου</p>
                  </div>
                  <div className="flex gap-2">
                    <button
                      type="button"
                      onClick={() => setTheme("light")}
                      className={`px-3 py-1 rounded-md ${
                        theme === "light" 
                          ? "bg-blue-600 text-white" 
                          : "bg-gray-200 text-gray-700"
                      }`}
                    >
                      Φωτεινό
                    </button>
                    <button
                      type="button"
                      onClick={() => setTheme("dark")}
                      className={`px-3 py-1 rounded-md ${
                        theme === "dark" 
                          ? "bg-blue-600 text-white" 
                          : "bg-gray-200 text-gray-700"
                      }`}
                    >
                      Σκοτεινό
                    </button>
                    <button
                      type="button"
                      onClick={() => setTheme("system")}
                      className={`px-3 py-1 rounded-md ${
                        theme === "system" 
                          ? "bg-blue-600 text-white" 
                          : "bg-gray-200 text-gray-700"
                      }`}
                    >
                      Συστήματος
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
        
      case 'users':
        return (
          <div className="space-y-6">
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-yellow-800">
                    Περιορισμένη Πρόσβαση
                  </h3>
                  <div className="mt-2 text-sm text-yellow-700">
                    <p>
                      Οι ρυθμίσεις χρηστών είναι διαθέσιμες μόνο για το ρόλο του Διαχειριστή. 
                      Επικοινωνήστε με τον κύριο διαχειριστή για αλλαγές στους λογαριασμούς χρηστών.
                    </p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-white shadow-md rounded-lg overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Όνομα
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Email
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ρόλος
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Κατάσταση
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Επεξεργασία</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  <tr>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-500">Α</span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">Admin User</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">admin@aion-cms.com</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                        Διαχειριστής
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Ενεργός
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button type="button" className="text-indigo-600 hover:text-indigo-900 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        Επεξεργασία
                      </button>
                    </td>
                  </tr>
                  <tr>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-500">E</span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">Editor User</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">editor@aion-cms.com</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        Συντάκτης
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Ενεργός
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button type="button" className="text-indigo-600 hover:text-indigo-900">
                        Επεξεργασία
                      </button>
                    </td>
                  </tr>
                  <tr>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-500">V</span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">Viewer User</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">viewer@aion-cms.com</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                        Επισκέπτης
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                        Σε αναμονή
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button type="button" className="text-indigo-600 hover:text-indigo-900">
                        Επεξεργασία
                      </button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        );
        
      case 'seo':
        return (
          <div className="space-y-6">
            <div>
              <label htmlFor="metaTitle" className="block text-sm font-medium mb-1">
                Προεπιλεγμένος Meta Title
              </label>
              <input
                id="metaTitle"
                name="metaTitle"
                type="text"
                placeholder="AION CMS - Ηλεκτρονικό Κατάστημα"
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
              <p className="mt-1 text-sm text-gray-500">
                Συνιστώμενο μήκος: 50-60 χαρακτήρες
              </p>
            </div>
            
            <div>
              <label htmlFor="metaDescription" className="block text-sm font-medium mb-1">
                Προεπιλεγμένο Meta Description
              </label>
              <textarea
                id="metaDescription"
                name="metaDescription"
                rows={3}
                placeholder="Το AION CMS προσφέρει προϊόντα υψηλής ποιότητας σε ανταγωνιστικές τιμές."
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
              <p className="mt-1 text-sm text-gray-500">
                Συνιστώμενο μήκος: 150-160 χαρακτήρες
              </p>
            </div>
            
            <div>
              <label htmlFor="ogImage" className="block text-sm font-medium mb-1">
                Προεπιλεγμένη Open Graph Εικόνα
              </label>
              <div className="flex items-center gap-4">
                <input
                  id="ogImage"
                  name="ogImage"
                  type="text"
                  placeholder="/images/og-image.jpg"
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                />
                <button
                  type="button"
                  className="px-3 py-2 bg-gray-200 text-gray-700 rounded"
                >
                  Επιλογή
                </button>
              </div>
              <p className="mt-1 text-sm text-gray-500">
                Προτεινόμενο μέγεθος: 1200x630 pixels
              </p>
            </div>
            
            <div className="border-t border-gray-200 pt-4">
              <h3 className="text-lg font-medium mb-3">Δομημένα Δεδομένα</h3>
              
              <div className="flex items-center mb-4">
                <input
                  id="enableStructuredData"
                  name="enableStructuredData"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 rounded border-gray-300"
                />
                <label htmlFor="enableStructuredData" className="ml-2 block text-sm font-medium">
                  Ενεργοποίηση Schema.org
                </label>
              </div>
              
              <div>
                <label htmlFor="businessType" className="block text-sm font-medium mb-1">
                  Τύπος Επιχείρησης
                </label>
                <select
                  id="businessType"
                  name="businessType"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                >
                  <option value="Store">Κατάστημα</option>
                  <option value="Restaurant">Εστιατόριο</option>
                  <option value="LocalBusiness">Τοπική Επιχείρηση</option>
                  <option value="Organization">Οργανισμός</option>
                </select>
              </div>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <Breadcrumbs />
      
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white">
          Ρυθμίσεις
        </h1>
      </div>
      
      <div className="flex flex-col md:flex-row gap-6">
        {/* Sidebar με τις καρτέλες */}
        <div className="w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
          <nav className="flex flex-col">
            <button
              onClick={() => setActiveTab('general')}
              className={`px-4 py-3 text-left ${
                activeTab === 'general' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
                </svg>
                Γενικές Ρυθμίσεις
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('shop')}
              className={`px-4 py-3 text-left ${
                activeTab === 'shop' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
                </svg>
                Ρυθμίσεις E-shop
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('appearance')}
              className={`px-4 py-3 text-left ${
                activeTab === 'appearance' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M4 2a2 2 0 00-2 2v11a3 3 0 106 0V4a2 2 0 00-2-2H4zm1 14a1 1 0 100-2 1 1 0 000 2zm5-1.757l4.9-4.9a2 2 0 000-2.828L13.485 5.1a2 2 0 00-2.828 0L10 5.757v8.486zM16 18H9.071l6-6H16a2 2 0 012 2v2a2 2 0 01-2 2z" />
                </svg>
                Εμφάνιση
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('users')}
              className={`px-4 py-3 text-left ${
                activeTab === 'users' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" />
                </svg>
                Χρήστες
              </div>
            </button>
            
            <button
              onClick={() => setActiveTab('seo')}
              className={`px-4 py-3 text-left ${
                activeTab === 'seo' 
                  ? 'bg-blue-50 border-l-4 border-blue-500 dark:bg-gray-700 dark:border-blue-400 font-medium text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
                </svg>
                SEO
              </div>
            </button>
          </nav>
        </div>
        
        {/* Περιεχόμενο καρτέλας */}
        <div className="flex-1">
          <AdminCard>
            <form onSubmit={handleSubmit}>
              {/* Εμφάνιση επιτυχούς αποθήκευσης */}
              {saveSuccess && (
                <div className="mb-6 bg-green-50 border-l-4 border-green-500 p-4 text-green-700">
                  <div className="flex">
                    <svg className="h-5 w-5 text-green-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <p>Οι ρυθμίσεις αποθηκεύτηκαν επιτυχώς!</p>
                  </div>
                </div>
              )}
              
              {/* Περιεχόμενο ενεργής καρτέλας */}
              {renderTabContent()}
              
              {/* Κουμπιά φόρμας */}
              <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 mt-8">
                <button
                  type="button"
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition"
                >
                  Ακύρωση
                </button>
                <button
                  type="submit"
                  disabled={isSaving}
                  className={`px-4 py-2 rounded-md text-white transition ${
                    isSaving ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
                  }`}
                >
                  {isSaving ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Αποθήκευση...
                    </span>
                  ) : (
                    'Αποθήκευση'
                  )}
                </button>
              </div>
            </form>
          </AdminCard>
        </div>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/api/categories/route.ts
----------------------------
import { NextRequest, NextResponse } from 'next/server';
import { Category } from '@/types';

// Προσωρινή αποθήκη κατηγοριών — θα αντικατασταθεί με πραγματική βάση δεδομένων
let categories: Category[] = [
  {
    id: '1',
    name: 'Category A',
    description: 'This is category A',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: '2',
    name: 'Category B',
    description: 'This is category B',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: '3',
    name: 'Category C',
    description: 'This is category C',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

// ------------------------
// GET
// ------------------------
export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const category = categories.find((c) => c.id === params.id);

  if (!category) {
    return NextResponse.json(
      { error: 'Category not found' },
      { status: 404 }
    );
  }

  return NextResponse.json(category);
}

// ------------------------
// PUT
// ------------------------
export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const data = await req.json();
    const index = categories.findIndex((c) => c.id === params.id);

    if (index === -1) {
      return NextResponse.json(
        { error: 'Category not found' },
        { status: 404 }
      );
    }

    categories[index] = {
      ...categories[index],
      ...data,
      updatedAt: new Date().toISOString(),
    };

    return NextResponse.json(categories[index]);
  } catch (error) {
    console.error('Error updating category:', error);
    return NextResponse.json(
      { error: 'Error updating category' },
      { status: 500 }
    );
  }
}

// ------------------------
// DELETE
// ------------------------
export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const index = categories.findIndex((c) => c.id === params.id);

  if (index === -1) {
    return NextResponse.json(
      { error: 'Category not found' },
      { status: 404 }
    );
  }

  categories.splice(index, 1);

  return NextResponse.json({ success: true });
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/api/media/route.ts
----------------------------
import { NextResponse } from 'next/server';
import { v2 as cloudinary } from 'cloudinary';

export async function GET() {
  try {
    // Ανάκτηση των εικόνων από το Cloudinary
    const result = await new Promise((resolve, reject) => {
      cloudinary.api.resources(
        {
          type: 'upload',
          prefix: 'aion-cms',
          max_results: 500,
        },
        (error, result) => {
          if (error) reject(error);
          else resolve(result);
        }
      );
    });

    return NextResponse.json((result as any).resources);
  } catch (error) {
    console.error('Error fetching from Cloudinary:', error);
    return NextResponse.json(
      { error: 'Error fetching images' },
      { status: 500 }
    );
  }
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/api/products/route.ts
----------------------------
import { NextRequest, NextResponse } from 'next/server';
import { Product } from '@/types';

// Προσωρινή αποθήκη προϊόντων θα αντικατασταθεί με πραγματική βάση δεδομένων
let products: Product[] = [
  {
    id: '1',
    name: 'Product 1',
    description: 'This is product 1',
    price: 29.99,
    images: ['https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg'],
    categoryId: '1',
    createdAt: new Date.toISOString,
    updatedAt: new Date.toISOString,
  },
  {
    id: '2',
    name: 'Product 2',
    description: 'This is product 2',
    price: 49.99,
    images: ['https://res.cloudinary.com/demo/image/upload/v1312461204/sample2.jpg'],
    categoryId: '2',
    createdAt: new Date.toISOString,
    updatedAt: new Date.toISOString,
  },
  {
    id: '3',
    name: 'Product 3',
    description: 'This is product 3',
    price: 19.99,
    images: [],
    categoryId: '1',
    createdAt: new Date.toISOString,
    updatedAt: new Date.toISOString,
  },
];

export async function GET() {
  return NextResponse.jsonproducts;
}

export async function POSTreq: NextRequest {
  try {
    const data = await req.json;
    
    // Επικύρωση δεδομένων
    if !data.name || typeof data.price !== 'number' {
      return NextResponse.json({ error: 'Invalid product data' },
        { status: 400 }
      ;
    }
    
    // Δημιουργία νέου προϊόντος
    const newProduct: Product = {
      id: Date.now.toString,
      name: data.name,
      description: data.description || '',
      price: data.price,
      images: data.images || [],
      categoryId: data.categoryId || '',
      createdAt: new Date.toISOString,
      updatedAt: new Date.toISOString,
    };
    
    // Προσθήκη στα προϊόντα
    products.pushnewProduct;
    
    return NextResponse.jsonnewProduct, { status: 201 };
  } catch (error) {
    console.error('Error creating product:', error);;
    return NextResponse.json({ error: 'Error creating product' },
      { status: 500 }
    ;
  }
}


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/layout.tsx
----------------------------
import "./globals.css";

export const metadata = {
  title: "AION CMS",
  description: "Content Management System για ηλεκτρονικά καταστήματα",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="el" suppressHydrationWarning>
      <body className="min-h-screen bg-[var(--aion-bg)] text-[var(--aion-fg)] font-sans antialiased">
        {children}
      </body>
    </html>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/lib/categoriesData.ts
----------------------------
// lib/categoriesData.ts

/**
 * Μοντέλο Κατηγορίας με βελτιωμένους τύπους
 */
export interface Category {
    id: number;
    name: string;
    slug: string;
    image?: string | null;
    productCount: number;
    isActive?: boolean;
    parentId?: number | null;
    order?: number;
    description?: string | null;
  }
  
  /**
   * Δοκιμαστικά δεδομένα Melisa με προσθήκη εικόνων για πληρότητα
   */
  export const melisaCategories: Category[] = [
    { 
      id: 1, 
      name: "Ξηροί Καρποί", 
      slug: "xiroi-karpoi", 
      productCount: 12, 
      image: "/placeholders/nuts.jpg",
      isActive: true,
      description: "Ποιοτικοί ξηροί καρποί με υψηλή διατροφική αξία"
    },
    { 
      id: 2, 
      name: "Αποξηραμένα Φρούτα", 
      slug: "apoxiremena-frouta", 
      productCount: 9, 
      image: "/placeholders/dried-fruits.jpg",
      isActive: true
    },
    { 
      id: 3, 
      name: "Superfoods", 
      slug: "superfoods", 
      productCount: 5, 
      image: "/placeholders/superfoods.jpg",
      isActive: true
    },
    { 
      id: 4, 
      name: "Μπάρες και Granola", 
      slug: "mpares-kai-granola", 
      productCount: 4, 
      image: "/placeholders/granola.jpg",
      isActive: true
    },
    { 
      id: 5, 
      name: "Φρέσκοι Χυμοί", 
      slug: "freskoi-xymoi", 
      productCount: 6, 
      image: "/placeholders/juices.jpg",
      isActive: true
    },
    { 
      id: 6, 
      name: "Καφέδες", 
      slug: "kafedes", 
      productCount: 3, 
      image: "/placeholders/coffee.jpg",
      isActive: true
    },
    { 
      id: 7, 
      name: "Κρασιά", 
      slug: "krasia", 
      productCount: 5, 
      image: "/placeholders/wines.jpg",
      isActive: true
    },
    { 
      id: 8, 
      name: "Καλάθια Δώρων", 
      slug: "kalathia-doron", 
      productCount: 4, 
      image: "/placeholders/gift-baskets.jpg",
      isActive: true
    },
    { 
      id: 9, 
      name: "Εποχιακά Γλυκά", 
      slug: "epoxiaka-glyka", 
      productCount: 2, 
      image: "/placeholders/seasonal-sweets.jpg",
      isActive: true
    },
    { 
      id: 10, 
      name: "Βελγικές Τρούφες", 
      slug: "velgikes-troufes", 
      productCount: 3, 
      image: "/placeholders/truffles.jpg",
      isActive: true
    },
    { 
      id: 11, 
      name: "Γλυκά του Κουταλιού", 
      slug: "glyka-tou-koutaliou", 
      productCount: 2, 
      image: "/placeholders/spoon-sweets.jpg",
      isActive: true
    },
    { 
      id: 12, 
      name: "Μαρμελάδες", 
      slug: "marmelades", 
      productCount: 3, 
      image: "/placeholders/jams.jpg",
      isActive: true
    },
    { 
      id: 13, 
      name: "Μέλια", 
      slug: "melia", 
      productCount: 6, 
      image: "/placeholders/honey.jpg",
      isActive: true
    },
    { 
      id: 14, 
      name: "Παραδοσιακά Γλυκά", 
      slug: "paradosiaka-glyka", 
      productCount: 5, 
      image: "/placeholders/traditional-sweets.jpg",
      isActive: true
    },
    { 
      id: 15, 
      name: "Κάβα Ποτών", 
      slug: "kava-poton", 
      productCount: 7, 
      image: "/placeholders/spirits.jpg",
      isActive: true
    },
    { 
      id: 16, 
      name: "Νέα Συλλογή", 
      slug: "nea-syllogi", 
      productCount: 0, 
      image: null,
      isActive: false,
      description: "Προσεχώς νέα συλλογή προϊόντων"
    },
  ];
  
  /**
   * Εισαγωγή της γενικής λειτουργίας καθυστέρησης από το utils
   * (αυτό θα μπορούσε να είναι σε ξεχωριστό αρχείο: lib/utils/delay.ts)
   */
  export const delay = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));
  
  /**
   * Τύπος για παραμέτρους αναζήτησης κατηγοριών
   */
  export interface CategorySearchParams {
    query?: string;
    isActive?: boolean;
    parentId?: number | null;
    minProductCount?: number;
    maxProductCount?: number;
    sortBy?: 'name' | 'productCount' | 'id';
    sortOrder?: 'asc' | 'desc';
    limit?: number;
    offset?: number;
  }
  
  /**
   * Τύπος για δημιουργία νέας κατηγορίας (χωρίς id)
   */
  export type CategoryCreateInput = Omit<Category, 'id' | 'productCount'> & { 
    productCount?: number 
  };
  
  /**
   * Τύπος για ενημέρωση υπάρχουσας κατηγορίας
   */
  export type CategoryUpdateInput = Partial<Omit<Category, 'id'>> & { id: number };
  
  /**
   * Τύπος απάντησης με pagination
   */
  export interface CategoryPaginatedResponse {
    items: Category[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }
  
  /**
   * Mock API: Λήψη όλων των κατηγοριών με προηγμένες επιλογές φιλτραρίσματος και ταξινόμησης
   */
  export const mockFetchCategories = async (params: CategorySearchParams = {}): Promise<CategoryPaginatedResponse> => {
    await delay(300);
  
    let filtered = [...melisaCategories];
  
    // Εφαρμογή φίλτρων
    if (params.query) {
      const query = params.query.toLowerCase();
      filtered = filtered.filter(c => 
        c.name.toLowerCase().includes(query) || 
        c.slug.toLowerCase().includes(query) ||
        (c.description && c.description.toLowerCase().includes(query))
      );
    }
  
    if (params.isActive !== undefined) {
      filtered = filtered.filter(c => c.isActive === params.isActive);
    }
  
    if (params.parentId !== undefined) {
      filtered = filtered.filter(c => c.parentId === params.parentId);
    }
  
    if (params.minProductCount !== undefined) {
      filtered = filtered.filter(c => c.productCount >= params.minProductCount);
    }
  
    if (params.maxProductCount !== undefined) {
      filtered = filtered.filter(c => c.productCount <= params.maxProductCount);
    }
  
    // Εφαρμογή ταξινόμησης
    if (params.sortBy) {
      const sortOrder = params.sortOrder === 'desc' ? -1 : 1;
      filtered.sort((a, b) => {
        if (params.sortBy === 'name') {
          return sortOrder * a.name.localeCompare(b.name);
        } else if (params.sortBy === 'productCount') {
          return sortOrder * (a.productCount - b.productCount);
        } else {
          return sortOrder * (a.id - b.id);
        }
      });
    }
  
    // Υπολογισμός συνολικών αποτελεσμάτων πριν από το pagination
    const total = filtered.length;
  
    // Εφαρμογή pagination
    const limit = params.limit || total;
    const offset = params.offset || 0;
    const paginatedItems = filtered.slice(offset, offset + limit);
    const currentPage = offset / limit + 1;
    const totalPages = Math.ceil(total / limit);
  
    return {
      items: paginatedItems,
      total,
      page: currentPage,
      limit,
      totalPages
    };
  };
  
  /**
   * Mock API: Λήψη κατηγορίας με βάση το ID
   */
  export const mockFetchCategoryById = async (id: number): Promise<Category | null> => {
    await delay(300);
    return melisaCategories.find(c => c.id === id) || null;
  };
  
  /**
   * Mock API: Λήψη κατηγορίας με βάση το slug
   */
  export const mockFetchCategoryBySlug = async (slug: string): Promise<Category | null> => {
    await delay(300);
    return melisaCategories.find(c => c.slug === slug) || null;
  };
  
  /**
   * Mock API: Προσθήκη νέας κατηγορίας
   */
  export const mockCreateCategory = async (data: CategoryCreateInput): Promise<Category> => {
    await delay(500);
    
    // Δημιουργία νέου ID (αύξουσα αρίθμηση)
    const maxId = Math.max(...melisaCategories.map(c => c.id), 0);
    const newId = maxId + 1;
    
    // Δημιουργία νέας κατηγορίας
    const newCategory: Category = {
      id: newId,
      name: data.name,
      slug: data.slug,
      image: data.image || null,
      productCount: data.productCount || 0,
      isActive: data.isActive !== undefined ? data.isActive : true,
      parentId: data.parentId || null,
      order: data.order || 0,
      description: data.description || null
    };
    
    melisaCategories.push(newCategory);
    return newCategory;
  };
  
  /**
   * Mock API: Ενημέρωση υπάρχουσας κατηγορίας
   */
  export const mockUpdateCategory = async (data: CategoryUpdateInput): Promise<Category | null> => {
    await delay(500);
    
    const index = melisaCategories.findIndex(c => c.id === data.id);
    
    if (index === -1) {
      return null;
    }
    
    // Ενημέρωση μόνο των πεδίων που παρέχονται
    melisaCategories[index] = {
      ...melisaCategories[index],
      ...data
    };
    
    return melisaCategories[index];
  };
  
  /**
   * Mock API: Διαγραφή κατηγορίας
   */
  export const mockDeleteCategory = async (id: number): Promise<boolean> => {
    await delay(500);
    
    const index = melisaCategories.findIndex(c => c.id === id);
    
    if (index === -1) {
      return false;
    }
    
    melisaCategories.splice(index, 1);
    return true;
  };
  
  /**
   * Mock API: Έλεγχος αν υπάρχει slug
   */
  export const mockCheckSlugExists = async (slug: string, excludeId?: number): Promise<boolean> => {
    await delay(200);
    
    return melisaCategories.some(c => c.slug === slug && c.id !== excludeId);
  };
  
  /**
   * Mock API: Ενημέρωση σειράς εμφάνισης κατηγοριών (batch update)
   */
  export const mockUpdateCategoryOrder = async (updates: { id: number; order: number }[]): Promise<boolean> => {
    await delay(500);
    
    updates.forEach(update => {
      const index = melisaCategories.findIndex(c => c.id === update.id);
      if (index !== -1) {
        melisaCategories[index].order = update.order;
      }
    });
    
    return true;
  };
  
  /**
   * Helper: Δημιουργία slug από string (transliteration)
   */
  export const generateCategorySlug = (input: string): string => {
    return input
      .toLowerCase()
      .replace(/[άΆαΑ]/g, "a")
      .replace(/[έΈεΕ]/g, "e")
      .replace(/[ήΉηΗ]/g, "i")
      .replace(/[ίΊϊΐιΙ]/g, "i")
      .replace(/[όΌοΟ]/g, "o")
      .replace(/[ύΎϋΰυΥ]/g, "y")
      .replace(/[ώΏωΩ]/g, "o")
      .replace(/\s+/g, "-")
      .replace(/[^a-zA-Z0-9\-]/g, "")
      .replace(/-+/g, "-") // Αφαιρεί πολλαπλές παύλες
      .replace(/^-|-$/g, ""); // Αφαιρεί παύλες στην αρχή και στο τέλος
  };

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/lib/cloudinary.ts
----------------------------
import { v2 as cloudinary } from 'cloudinary';

// Ρύθμιση cloudinary με τα credentials
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'demo',
  api_key: process.env.CLOUDINARY_API_KEY || '123456789',
  api_secret: process.env.CLOUDINARY_API_SECRET || 'abcdefghijklmn',
  secure: true
});

export default cloudinary;

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/login/page.tsx
----------------------------
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function Login() {
  const router = useRouter();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Demo credentials
    if (username === "admin" && password === "admin") {
      localStorage.setItem("isLoggedIn", "true");
      router.push("/admin/dashboard");
    } else {
      setError("Invalid username or password");
    }
  };

  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-24">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">AION CMS Login</h1>
          <p className="mt-2 text-gray-600">Sign in to your account</p>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700">
              Username
            </label>
            <input
              id="username"
              name="username"
              type="text"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>

          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Sign in
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/not-fund.tsx
----------------------------
"use client";

import Link from "next/link";

export default function NotFound() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-[var(--aion-bg)] text-[var(--aion-fg)] px-6">
      <div className="text-center max-w-xl space-y-6">
        {/* 404 Heading */}
        <div className="flex items-center justify-center gap-4">
          <span className="text-6xl font-bold text-[var(--aion-primary)]">404</span>
          <div className="text-left">
            <h1 className="text-2xl font-semibold text-gray-800 dark:text-white">
              Η σελίδα δεν βρέθηκε
            </h1>
            <p className="text-sm text-aion-muted mt-1">
              Η διεύθυνση που αναζητάτε δεν υπάρχει ή έχει μετακινηθεί.
            </p>
          </div>
        </div>

        {/* Emoji or Icon */}
        <div className="text-5xl">🚫</div>

        {/* Action Button */}
        <div>
          <Link
            href="/admin/dashboard"
            className="inline-block px-6 py-3 bg-aion-primary text-white text-sm font-medium rounded-md shadow-lg hover:bg-blue-700 transition"
          >
            Επιστροφή στο Dashboard
          </Link>
        </div>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/app/page.tsx
----------------------------
"use client";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import Link from "next/link";

export default function Home() {
  const [timestamp, setTimestamp] = useState("");

  useEffect(() => {
    setTimestamp(new Date().toLocaleTimeString());
  }, []);

  return (
    <main className="min-h-screen flex items-center justify-center bg-aion-bg text-aion-fg px-6 relative overflow-hidden">
      {/* Grid Background */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.04 }}
        transition={{ duration: 1.5 }}
        className="absolute inset-0 bg-[url('/grid.jpg')] bg-repeat pointer-events-none z-0"
      />

      {/* Aura Bubble */}
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 0.2, scale: 1 }}
        transition={{ duration: 1.4, ease: "easeOut" }}
        className="absolute top-1/2 left-1/2 w-[800px] h-[800px] -translate-x-1/2 -translate-y-1/2 rounded-full bg-aion-primary blur-3xl opacity-10 z-0"
      />

      {/* Content */}
      <motion.div
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        className="z-10 text-center max-w-2xl space-y-8 backdrop-blur-md bg-white/10 px-10 py-14 rounded-2xl shadow-2xl border border-white/20"
      >
        <h1 className="text-4xl sm:text-5xl font-extrabold leading-tight tracking-tight dark:text-white text-gray-900">
          👋 Καλώς ήρθατε στο <span className="text-aion-primary">AION CMS</span>
        </h1>
        <p className="text-lg sm:text-xl text-aion-muted leading-relaxed">
          Το μέλλον της διαχείρισης περιεχομένου για e-commerce, διαμορφωμένο για επιδόσεις, αισθητική και ευφυΐα.
        </p>
        <Link
          href="/login"
          className="inline-block bg-aion-primary text-white px-7 py-3 rounded-full shadow-lg hover:bg-blue-700 transition"
        >
          🚀 Συνδεθείτε ως διαχειριστής
        </Link>

        <p className="text-xs text-aion-muted">
          Debug: AION CMS UI loaded @ {timestamp}
        </p>
      </motion.div>
    </main>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/AdminHeader.tsx
----------------------------
"use client";

import { useEffect, useState, useRef } from "react";
import { Sun, Moon, Menu, LogOut, Settings, User } from "lucide-react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { useTheme } from "@/components/theme/ThemeProvider";

type AdminHeaderProps = {
  toggleSidebar: () => void;
};

export default function AdminHeader({ toggleSidebar }: AdminHeaderProps) {
  const { theme, setTheme } = useTheme();
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const router = useRouter();

  // Toggle theme
  const toggleTheme = () => {
    const next = theme === "dark" ? "light" : "dark";
    setTheme(next);
  };

  const handleLogout = () => {
    localStorage.removeItem("isLoggedIn");
    router.push("/login");
  };

  // Click outside dropdown
  useEffect(() => {
    const handler = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handler);
    return () => document.removeEventListener("mousedown", handler);
  }, []);

  return (
    <header className="flex items-center justify-between px-4 sm:px-6 h-16 sticky top-0 z-40 backdrop-blur-md bg-white/70 dark:bg-gray-900/60 border-b border-white/20 dark:border-gray-800">
      {/* 👈 Sidebar toggle + Title */}
      <div className="flex items-center gap-4">
        <button
          onClick={toggleSidebar}
          className="p-1 rounded hover:bg-[var(--aion-bg-hover)] transition md:hidden"
        >
          <Menu size={20} />
        </button>
        <h1 className="text-lg font-semibold text-[var(--aion-fg)] dark:text-white">
          AION Dashboard
        </h1>
      </div>

      {/* 👉 Theme toggle + User dropdown */}
      <div className="flex items-center gap-4 relative" ref={dropdownRef}>
        <button
          onClick={toggleTheme}
          className="p-2 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition"
        >
          {theme === "dark" ? <Sun size={18} /> : <Moon size={18} />}
        </button>

        <button
          onClick={() => setDropdownOpen((prev) => !prev)}
          className="w-8 h-8 rounded-full overflow-hidden border border-gray-300 dark:border-gray-600"
        >
          <Image
            src="/avatar.png"
            alt="User"
            width={32}
            height={32}
            className="object-cover"
          />
        </button>

        {dropdownOpen && (
          <div className="absolute right-0 top-12 w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow-lg z-50">
            <button
              onClick={() => router.push("/admin/profile")}
              className="flex items-center gap-2 px-4 py-2 text-sm w-full hover:bg-gray-100 dark:hover:bg-gray-700 transition"
            >
              <User size={16} />
              Προφίλ
            </button>
            <button
              onClick={() => router.push("/admin/settings")}
              className="flex items-center gap-2 px-4 py-2 text-sm w-full hover:bg-gray-100 dark:hover:bg-gray-700 transition"
            >
              <Settings size={16} />
              Ρυθμίσεις
            </button>
            <button
              onClick={handleLogout}
              className="flex items-center gap-2 px-4 py-2 text-sm w-full text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition"
            >
              <LogOut size={16} />
              Αποσύνδεση
            </button>
            <div className="px-4 py-2 text-xs text-gray-500 dark:text-gray-400">
              Θέμα: {theme}
            </div>
          </div>
        )}
      </div>
    </header>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/AdminLayout.tsx
----------------------------
"use client";

import AdminSidebar from "@/components/admin/AdminSidebar";
import AdminHeader from "@/components/admin/AdminHeader";
import { useState } from "react";
import clsx from "clsx";

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  return (
    <div className="flex h-screen bg-[var(--aion-bg)] text-[var(--aion-fg)]">
      {/* Sidebar με toggle state */}
      <AdminSidebar
        collapsed={sidebarCollapsed}
        toggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}
      />

      {/* Content Area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Sticky Glass Header */}
        <div className="sticky top-0 z-40 backdrop-blur-lg bg-white/70 dark:bg-gray-900/60 border-b border-white/20 dark:border-gray-800 shadow-sm transition-colors">
          <AdminHeader toggleSidebar={() => setSidebarCollapsed(!sidebarCollapsed)} />
        </div>

        {/* Main Content */}
        <main
          className={clsx(
            "flex-1 overflow-y-auto px-6 py-6 md:px-10 md:py-8",
            "bg-white dark:bg-gray-900 transition-colors duration-300"
          )}
        >
          {children}
        </main>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/AdminSidebar.tsx
----------------------------
"use client";

import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import { useState } from "react";
import clsx from "clsx";
import {
  LayoutDashboard,
  Package,
  Tag,
  Image,
  Settings,
  LogOut,
  ChevronLeft,
} from "lucide-react";
import { ThemeToggle } from "@/components/theme/ThemeToggle";

type SidebarProps = {
  collapsed: boolean;
  toggleCollapse: () => void;
};

type NavItem = {
  label: string;
  href: string;
  icon: React.ElementType;
  emoji?: string;
  badge?: number;
};

const navItems: NavItem[] = [
  { label: "Dashboard", href: "/admin/dashboard", icon: LayoutDashboard, emoji: "📊" },
  { label: "Προϊόντα", href: "/admin/products", icon: Package, emoji: "📦", badge: 24 },
  { label: "Κατηγορίες", href: "/admin/categories", icon: Tag, emoji: "🗂️", badge: 8 },
  { label: "Πολυμέσα", href: "/admin/media", icon: Image, emoji: "🖼️", badge: 56 },
  { label: "Ρυθμίσεις", href: "/admin/settings", icon: Settings, emoji: "⚙️" },
];

export default function AdminSidebar({ collapsed, toggleCollapse }: SidebarProps) {
  const pathname = usePathname();
  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem("isLoggedIn");
    router.push("/login");
  };

  return (
    <aside
      className={clsx(
        "h-screen flex flex-col overflow-hidden shadow-xl z-40 transition-all duration-300",
        "bg-white/10 dark:bg-gray-900/40 border-r border-white/20 dark:border-gray-800 backdrop-blur-lg",
        collapsed ? "w-16" : "w-64"
      )}
    >
      {/* 🔷 Header */}
      <div className="flex items-center justify-between p-4 border-b border-white/10 dark:border-gray-800">
        <Link href="/admin/dashboard" aria-label="AION Dashboard">
          <span className="text-lg font-semibold text-[var(--aion-primary)]">
            {collapsed ? "🌀" : "AION CMS"}
          </span>
        </Link>
        <button
          onClick={toggleCollapse}
          className="text-[var(--aion-muted)] hover:text-[var(--aion-primary)] transition"
          aria-label="Toggle sidebar"
        >
          <ChevronLeft
            size={20}
            className={clsx("transition-transform", collapsed && "rotate-180")}
          />
        </button>
      </div>

      {/* 🔷 Nav */}
      <nav className="flex-1 px-2 py-4 space-y-1">
        {navItems.map(({ href, label, icon: Icon, emoji, badge }) => {
          const isActive = pathname === href || pathname?.startsWith(`${href}/`);
          return (
            <Link
              key={href}
              href={href}
              className={clsx(
                "flex items-center gap-3 px-3 py-2 rounded-md text-sm group transition-all",
                isActive
                  ? "bg-[var(--aion-primary)] text-white shadow font-semibold"
                  : "hover:bg-[var(--aion-bg-hover)] text-[var(--aion-fg)] dark:text-white"
              )}
              title={label}
            >
              {collapsed ? (
                <span
                  className={clsx("text-xl", isActive && "scale-110")}
                  aria-hidden
                >
                  {emoji}
                </span>
              ) : (
                <>
                  <Icon className="h-5 w-5" />
                  <span className="flex-1">{label}</span>
                  {badge !== undefined && (
                    <span className="ml-auto rounded-full bg-blue-600 px-2 py-0.5 text-xs text-white">
                      {badge}
                    </span>
                  )}
                </>
              )}
            </Link>
          );
        })}
      </nav>

      {/* 🔷 Footer */}
      <div className="px-2 py-4 border-t border-white/10 dark:border-gray-800">
        {!collapsed && <ThemeToggle />}
        <button
          onClick={handleLogout}
          className="mt-3 flex items-center gap-2 w-full px-3 py-2 text-sm text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition"
        >
          <LogOut className="h-5 w-5" />
          {!collapsed && <span>Αποσύνδεση</span>}
        </button>
        {!collapsed && (
          <div className="mt-4 text-xs text-center text-aion-muted">v0.1.0</div>
        )}
      </div>
    </aside>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/Breadcrumbs.tsx
----------------------------
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";

export default function Breadcrumbs() {
  const pathname = usePathname();
  const segments = pathname.split("/").filter(Boolean);

  const getBreadcrumbLabel = (segment: string, index: number): string => {
    if (/^[0-9]+$/.test(segment) || (index > 0 && segments[index - 1] === "edit")) return "";

    const labels: Record<string, string> = {
      admin: "AION",
      dashboard: "Dashboard",
      products: "Προϊόντα",
      categories: "Κατηγορίες",
      media: "Πολυμέσα",
      edit: "Επεξεργασία",
      add: "Νέο",
      new: "Νέο",
    };

    return labels[segment] || segment.charAt(0).toUpperCase() + segment.slice(1);
  };

  const getLinkHref = (seg: string, idx: number): string => {
    // Αν είναι "admin", το redirect πρέπει να πηγαίνει στο dashboard
    if (seg === "admin") return "/admin/dashboard";
    return "/" + segments.slice(0, idx + 1).join("/");
  };

  const breadcrumbs = segments.map((seg, idx) => {
    const label = getBreadcrumbLabel(seg, idx);
    if (!label) return null;

    const href = getLinkHref(seg, idx);
    const isLast = idx === segments.length - 1;

    return (
      <li key={href} className="flex items-center">
        {!isLast ? (
          <>
            <Link href={href} className="text-blue-600 hover:underline capitalize">
              {label}
            </Link>
            <span className="mx-2 text-gray-400">/</span>
          </>
        ) : (
          <span className="capitalize text-gray-500 dark:text-gray-400">{label}</span>
        )}
      </li>
    );
  }).filter(Boolean);

  if (breadcrumbs.length <= 1) return null;

  return (
    <nav className="text-sm text-gray-500 dark:text-gray-400 mb-6" aria-label="Breadcrumb">
      <ol className="inline-flex items-center">
        <li className="flex items-center">
          <Link href="/admin/dashboard" className="text-blue-600 hover:underline">
            Αρχική
          </Link>
          <span className="mx-2 text-gray-400">/</span>
        </li>
        {breadcrumbs}
      </ol>
    </nav>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/cards/AdminCard.tsx
----------------------------
"use client";

import React from "react";
import clsx from "clsx";

interface AdminCardProps {
  title?: string;
  description?: string;
  children: React.ReactNode;
  footer?: React.ReactNode;
  className?: string;
}

export default function AdminCard({
  title,
  description,
  children,
  footer,
  className = "",
}: AdminCardProps) {
  return (
    <div
      className={clsx(
        "bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700",
        className
      )}
    >
      {(title || description) && (
        <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          {title && (
            <h2 className="text-lg font-semibold text-gray-800 dark:text-white">
              {title}
            </h2>
          )}
          {description && (
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              {description}
            </p>
          )}
        </div>
      )}

      <div className="p-6">{children}</div>

      {footer && (
        <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 rounded-b-lg">
          {footer}
        </div>
      )}
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/cards/EmojiStatCard.tsx
----------------------------
"use client";

type EmojiStatCardProps = {
  title: string;
  value: number;
  icon: string;     // emoji
  color?: string;   // Tailwind color class (π.χ. 'bg-blue-500')
};

export default function EmojiStatCard({
  title,
  value,
  icon,
  color = "bg-blue-500",
}: EmojiStatCardProps) {
  return (
    <div className={`p-6 rounded-lg shadow-md text-white ${color}`}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm opacity-80">{title}</p>
          <h3 className="text-3xl font-bold mt-1">{value}</h3>
        </div>
        <div className="text-4xl">{icon}</div>
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/cards/StatCard.tsx
----------------------------
"use client";

import React from "react";
import clsx from "clsx";

type StatCardProps = {
  title: string;
  value: number | string;
  icon?: React.ReactNode;
  color?: string; // Tailwind bg class
  footer?: React.ReactNode;
  change?: number;
  changeType?: "positive" | "negative" | "neutral";
};

export default function StatCard({
  title,
  value,
  icon,
  color,
  footer,
  change,
  changeType = "neutral",
}: StatCardProps) {
  const changeColor = {
    positive: "text-green-500",
    negative: "text-red-500",
    neutral: "text-gray-400 dark:text-gray-500",
  };

  const changeIcon = {
    positive: "▲",
    negative: "▼",
    neutral: "◆",
  };

  const valueFormatted =
    typeof value === "number" ? value.toLocaleString() : value;

  return (
    <div
      className={clsx(
        "rounded-xl p-6 shadow-md transition group hover:shadow-lg flex flex-col justify-between",
        color || "bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
      )}
    >
      <div className="flex items-center justify-between mb-2">
        <div>
          <p className="text-sm text-gray-500 dark:text-gray-400">{title}</p>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mt-1">
            {valueFormatted}
          </h2>
        </div>
        {icon && (
          <div className="text-4xl opacity-80 group-hover:scale-105 transition">
            {icon}
          </div>
        )}
      </div>

      {change !== undefined && (
        <div className={clsx("text-sm mt-2", changeColor[changeType])}>
          <span>{changeIcon[changeType]} </span>
          <span>
            {change > 0 ? "+" : ""}
            {change}% από τον προηγούμενο μήνα
          </span>
        </div>
      )}

      {footer && (
        <div className="text-xs opacity-70 mt-4">{footer}</div>
      )}
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/ImageUploader.tsx
----------------------------
"use client";

import { useState } from "react";

type Props = {
  onUpload: (result: any) => void;
  accept?: string;
  maxSize?: number;
};

export default function ImageUploader({
  onUpload,
  accept = "image/*",
  maxSize = 5 * 1024 * 1024,
}: Props) {
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);

  const validateAndPreview = (file: File) => {
    setError(null);
    if (!file.type.startsWith("image/")) {
      setError("Το αρχείο πρέπει να είναι εικόνα.");
      return;
    }
    if (file.size > maxSize) {
      setError(`Μέγιστο μέγεθος: ${(maxSize / 1024 / 1024).toFixed(1)}MB`);
      return;
    }
    setPreviewUrl(URL.createObjectURL(file));
    uploadFile(file);
  };

  const uploadFile = async (file: File) => {
    setIsUploading(true);
    try {
      // Αν υπάρχει cloudinary wrapper, βάλε εδώ
      // const result = await uploadImage(file);
      // onUpload(result);

      // Mock fallback για demo:
      const result = {
        secure_url: URL.createObjectURL(file),
        original_filename: file.name,
      };
      onUpload(result);
    } catch (err) {
      setError("Αποτυχία κατά το ανέβασμα.");
    } finally {
      setIsUploading(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    if (file) validateAndPreview(file);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) validateAndPreview(file);
  };

  return (
    <div
      onDrop={handleDrop}
      onDragOver={(e) => {
        e.preventDefault();
        setIsDragging(true);
      }}
      onDragLeave={() => setIsDragging(false)}
      className={`p-6 rounded-lg border-2 border-dashed transition ${
        isDragging ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20" : "border-gray-300"
      }`}
    >
      <div className="text-center">
        <input
          type="file"
          id="image"
          accept={accept}
          className="hidden"
          onChange={handleChange}
        />
        <label
          htmlFor="image"
          className="cursor-pointer text-blue-600 hover:underline"
        >
          Επιλέξτε εικόνα ή σύρετε εδώ
        </label>
        <p className="text-xs text-gray-500 mt-1">
          PNG, JPG, GIF έως {(maxSize / 1024 / 1024).toFixed(1)}MB
        </p>

        {previewUrl && (
          <div className="mt-4">
            <img
              src={previewUrl}
              alt="Preview"
              className="w-full max-h-64 object-contain rounded shadow"
            />
          </div>
        )}

        {error && (
          <p className="mt-2 text-sm text-red-600">{error}</p>
        )}

        {isUploading && (
          <p className="mt-2 text-sm text-gray-400">Ανέβασμα...</p>
        )}
      </div>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/layout.tsx
----------------------------
'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import AdminSidebar from './AdminSidebar';
export default function AdminLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    const router = useRouter();
    const [isClient, setIsClient] = useState(false);
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [isLoginPage, setIsLoginPage] = useState(false);

    useEffect(() => {
        setIsClient(true);
        // Check if the user is logged in
        const loggedIn = localStorage.getItem('isLoggedIn');
        setIsLoggedIn(!!loggedIn);
        
        // Check if we are on the login page
        setIsLoginPage(window.location.pathname === '/admin/login');
        
        // Redirect to login page if not logged in
        if (!loggedIn && window.location.pathname !== '/admin/login') {
            router.push('/admin/login');
        }
    }, [router]);

    // If we are not on the client yet, return only the content
    if (!isClient) {
        return <div className="flex-1">{children}</div>;
    }

    return (
        <div className="flex h-screen bg-gray-100">
            {isLoggedIn && !isLoginPage && <AdminSidebar collapsed={false} toggleCollapse={function (): void {
                throw new Error('Function not implemented.');
            } } />}
            <main className="flex-1 overflow-y-auto p-4">
                {children}
            </main>
        </div>
    );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/Sidebar.tsx
----------------------------
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import clsx from "clsx";
import { useState, useEffect } from "react";
import {
  LayoutDashboard,
  Package,
  FolderKanban,
  ImageIcon,
  LogOut,
  Menu,
  Sun,
  Moon,
} from "lucide-react";

const links = [
  { href: "/admin/dashboard", label: "Dashboard", icon: LayoutDashboard },
  { href: "/admin/products", label: "Προϊόντα", icon: Package },
  { href: "/admin/categories", label: "Κατηγορίες", icon: FolderKanban },
  { href: "/admin/media", label: "Πολυμέσα", icon: ImageIcon },
];

export default function Sidebar() {
  const pathname = usePathname();
  const [isOpen, setIsOpen] = useState(true);
  const [darkMode, setDarkMode] = useState(false);

  // Load theme from localStorage
  useEffect(() => {
    const stored = localStorage.getItem("aion_theme");
    if (stored === "dark") setDarkMode(true);
  }, []);

  // Sync darkMode toggle
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add("dark");
      localStorage.setItem("aion_theme", "dark");
    } else {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("aion_theme", "light");
    }
  }, [darkMode]);

  const handleLogout = () => {
    localStorage.removeItem("isLoggedIn");
    window.location.href = "/login";
  };

  return (
    <>
      {/* Toggle Button (Mobile + Collapse) */}
      <div className="md:hidden p-4 bg-gray-900 text-white flex justify-between items-center">
        <h1 className="font-bold text-xl">AION CMS</h1>
        <div className="flex items-center gap-4">
          <button onClick={() => setDarkMode(!darkMode)}>
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
          <button onClick={() => setIsOpen((prev) => !prev)}>
            <Menu size={24} />
          </button>
        </div>
      </div>

      {/* Sidebar */}
      <aside
        className={clsx(
          "bg-gray-900 text-white h-screen shadow-lg flex flex-col transition-all duration-300 z-50",
          "md:w-64",
          isOpen ? "w-64" : "w-0 overflow-hidden",
          "fixed md:static top-0 left-0"
        )}
      >
        <div className="hidden md:block p-5 border-b border-gray-700">
          <h1 className="text-2xl font-extrabold tracking-wide">AION CMS</h1>
        </div>

        <nav className="flex-1 px-4 py-6 overflow-y-auto">
          <ul className="space-y-3">
            {links.map(({ href, label, icon: Icon }) => (
              <li key={href}>
                <Link
                  href={href}
                  className={clsx(
                    "flex items-center gap-3 px-4 py-2 rounded-md transition hover:bg-gray-800",
                    pathname === href && "bg-gray-800 font-semibold"
                  )}
                  onClick={() => setIsOpen(false)}
                >
                  <Icon size={18} />
                  <span>{label}</span>
                </Link>
              </li>
            ))}
          </ul>
        </nav>

        <div className="p-4 border-t border-gray-800">
          <button
            onClick={handleLogout}
            className="w-full flex items-center gap-3 px-4 py-2 rounded-md bg-red-600 hover:bg-red-700 transition text-white"
          >
            <LogOut size={18} />
            Αποσύνδεση
          </button>
        </div>
      </aside>
    </>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/admin/UserDropdown.tsx
----------------------------
"use client";

import { useRouter } from "next/navigation";
import { useState, useRef, useEffect } from "react";
import { LogOut, Settings, User } from "lucide-react";

export default function UserDropdown() {
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem("isLoggedIn");
    router.push("/login");
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setOpen(!open)}
        className="w-8 h-8 rounded-full overflow-hidden border border-gray-300 dark:border-gray-600"
      >
        <img src="/avatar.png" alt="User" className="object-cover w-full h-full" />
      </button>

      {open && (
        <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow-md z-50">
          <button
            onClick={() => {
              setOpen(false);
              router.push("/admin/profile");
            }}
            className="flex items-center gap-2 px-4 py-2 text-sm w-full hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <User size={16} />
            Προφίλ
          </button>
          <button
            onClick={() => {
              setOpen(false);
              router.push("/admin/settings");
            }}
            className="flex items-center gap-2 px-4 py-2 text-sm w-full hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <Settings size={16} />
            Ρυθμίσεις
          </button>
          <button
            onClick={handleLogout}
            className="flex items-center gap-2 px-4 py-2 text-sm w-full text-red-600 hover:bg-red-50 dark:hover:bg-red-900"
          >
            <LogOut size={16} />
            Αποσύνδεση
          </button>
        </div>
      )}
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/ClientLayout.tsx
----------------------------
// src/components/layout/ClientLayout.tsx
"use client";
import { ThemeProvider } from "@/components/theme/ThemeProvider";

export default function ClientLayout({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider>
      {children}
    </ThemeProvider>
  );
}


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/forms/TextField.tsx
----------------------------
interface TextFieldProps {
  id: string;
  label: string;
  value: string;
  onChange: e: React.ChangeEvent<HTMLInputElement> => void;
  type?: string;
  placeholder?: string;
  required?: boolean;
  error?: string;
}

export default function TextField{
  id,
  label,
  value,
  onChange,
  type = 'text',
  placeholder = '',
  required = false,
  error,
}: TextFieldProps {
  return 
    <div className="mb-4">
      <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      <input
        id={id}
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        required={required}
        className={`w-full px-3 py-2 border ${
          error ? 'border-red-500' : 'border-gray-300'
        } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
      />
      {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
    </div>
  ;
}


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/layout/ClientLayout.tsx
----------------------------
// src/components/layout/ClientLayout.tsx
"use client";
import { ThemeProvider } from "@/components/theme/ThemeProvider";

export default function ClientLayout({ children }: { children: React.ReactNode }) {
  return <ThemeProvider>{children}</ThemeProvider>;
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/products/add/page.tsx
----------------------------


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/products/edit/page.tsx
----------------------------


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/products/ProductForm.tsx
----------------------------
"use client";

import { useState } from "react";

type Product = {
  name: string;
  price: number;
  category: string;
  description: string;
  images: string[]; // URLs from Cloudinary
};

type Props = {
  initialData?: Product;
  onSubmit: (data: Product) => void;
};

export default function ProductForm({ initialData, onSubmit }: Props) {
  const [name, setName] = useState(initialData?.name || "");
  const [price, setPrice] = useState(initialData?.price || 0);
  const [category, setCategory] = useState(initialData?.category || "");
  const [description, setDescription] = useState(initialData?.description || "");
  const [images, setImages] = useState<string[]>(initialData?.images || []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit({ name, price, category, description, images });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-w-xl mx-auto">
      <h2 className="text-2xl font-semibold mb-4">{initialData ? "Επεξεργασία Προϊόντος" : "Προσθήκη Νέου Προϊόντος"}</h2>

      <input
        type="text"
        placeholder="Όνομα προϊόντος"
        className="w-full border p-2 rounded"
        value={name}
        onChange={(e) => setName(e.target.value)}
        required
      />

      <input
        type="number"
        placeholder="Τιμή (€)"
        className="w-full border p-2 rounded"
        value={price}
        onChange={(e) => setPrice(Number(e.target.value))}
        required
      />

      <input
        type="text"
        placeholder="Κατηγορία"
        className="w-full border p-2 rounded"
        value={category}
        onChange={(e) => setCategory(e.target.value)}
        required
      />

      <textarea
        placeholder="Περιγραφή προϊόντος"
        className="w-full border p-2 rounded h-32"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
      />

      {/* Προσωρινά placeholder για Cloudinary εικόνες */}
      <input
        type="text"
        placeholder="Cloudinary URL εικόνας"
        className="w-full border p-2 rounded"
        onChange={(e) => setImages([e.target.value])}
      />

      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Αποθήκευση
      </button>
    </form>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/theme/ThemeProvider.tsx
----------------------------
// src/components/theme/ThemeProvider.tsx

"use client";

import { createContext, useContext, useEffect, useState } from "react";

type Theme = "light" | "dark" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
};

type ThemeContextType = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({
  children,
  defaultTheme = "system",
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(defaultTheme);
  const [mounted, setMounted] = useState(false);

  // 🔁 Load theme from localStorage on first render
  useEffect(() => {
    const saved = localStorage.getItem("aion-theme") as Theme;
    if (saved === "light" || saved === "dark" || saved === "system") {
      setTheme(saved);
    }
    setMounted(true);
  }, []);

  // 🌓 Apply theme to <html>
  useEffect(() => {
    if (!mounted) return;
    const root = document.documentElement;
    root.classList.remove("light", "dark");

    const systemPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const resolvedTheme = theme === "system" ? (systemPrefersDark ? "dark" : "light") : theme;

    root.classList.add(resolvedTheme);
    localStorage.setItem("aion-theme", theme);
  }, [theme, mounted]);

  const value: ThemeContextType = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem("aion-theme", theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeContext.Provider value={value}>
      {mounted && children}
    </ThemeContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error("❌ useTheme must be used within ThemeProvider");
  }
  return context;
};

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/theme/ThemeToggle.tsx
----------------------------
"use client";

import { useTheme } from "@/components/theme/ThemeProvider";
import { Sun, Moon, Laptop } from "lucide-react";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();

  const isActive = (value: string) => theme === value;

  const btnBase =
    "p-2 rounded-md border transition-colors duration-200 hover:bg-[var(--aion-bg-hover)]";

  return (
    <div className="flex items-center gap-2">
      <button
        aria-label="Φως"
        onClick={() => setTheme("light")}
        className={`${btnBase} ${isActive("light") ? "bg-[var(--aion-primary)] text-white" : "text-[var(--aion-muted)]"}`}
      >
        <Sun className="w-5 h-5" />
      </button>
      <button
        aria-label="Σκοτάδι"
        onClick={() => setTheme("dark")}
        className={`${btnBase} ${isActive("dark") ? "bg-[var(--aion-primary)] text-white" : "text-[var(--aion-muted)]"}`}
      >
        <Moon className="w-5 h-5" />
      </button>
      <button
        aria-label="System"
        onClick={() => setTheme("system")}
        className={`${btnBase} ${isActive("system") ? "bg-[var(--aion-primary)] text-white" : "text-[var(--aion-muted)]"}`}
      >
        <Laptop className="w-5 h-5" />
      </button>
    </div>
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/ui/Button.tsx
----------------------------
// src/components/ui/Button.tsx
"use client";

import { forwardRef } from "react";
import { Loader2 } from "lucide-react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",
  {
    variants: {
      variant: {
        default: "bg-[var(--aion-primary)] text-white hover:bg-[var(--aion-primary-dark)]",
        destructive: "bg-red-500 text-white hover:bg-red-600",
        outline: "border border-[var(--aion-border)] bg-transparent hover:bg-[var(--aion-bg-hover)]",
        ghost: "bg-transparent hover:bg-[var(--aion-bg-hover)]",
        link: "text-[var(--aion-primary)] underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  isLoading?: boolean;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, children, variant, size, isLoading, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size }), className)}
        ref={ref}
        disabled={isLoading || props.disabled}
        {...props}
      >
        {isLoading && (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        )}
        {children}
      </button>
    );
  }
);

Button.displayName = "Button";

export { Button, buttonVariants };

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/components/ui/Card.tsx
----------------------------
// src/components/ui/Card.tsx

import { cn } from "@/lib/utils/utils";

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  glass?: boolean;
}

export function Card({ className, glass = false, ...props }: CardProps) {
  return (
    <div
      className={cn(
        "card", // ✅ AION utility from globals.css
        glass && "bg-white/10 backdrop-blur-md border-white/20",
        className
      )}
      {...props}
    />
  );
}

export function CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        "px-6 py-4 border-b border-[var(--aion-border)] bg-[var(--aion-card-bg)]",
        className
      )}
      {...props}
    />
  );
}

export function CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {
  return (
    <h3
      className={cn(
        "text-lg font-semibold text-gray-800 dark:text-white",
        className
      )}
      {...props}
    />
  );
}

export function CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn("p-6 text-[var(--aion-fg)]", className)} {...props} />
  );
}

export function CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        "px-6 py-4 border-t border-[var(--aion-border)] bg-[var(--aion-card-bg)]",
        className
      )}
      {...props}
    />
  );
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/lib/cloudinary/index.ts
----------------------------
import { v2 as cloudinary } from 'cloudinary';

// Ρύθμιση του Cloudinary με τα κλειδιά από τις μεταβλητές περιβάλλοντος
cloudinary.config({
  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true,
});

/**
 * Ανεβάζει μια εικόνα στο Cloudinary
 * @param file Το αρχείο προς ανέβασμα
 * @returns Πληροφορίες για την εικόνα που ανέβηκε
 */
export const uploadImage = async (file: File) => {
  try {
    // Μετατροπή του αρχείου σε base64
    const base64data = await toBase64(file);
    
    // Δημιουργία του FormData για το upload
    const formData = new FormData();
    formData.append('file', base64data);
    formData.append('upload_preset', process.env.CLOUDINARY_UPLOAD_PRESET || 'melisa_unsigned');
    
    // Ανέβασμα στο Cloudinary μέσω του API
    const response = await fetch(
      `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );
    
    return await response.json();
  } catch (error) {
    console.error('Error uploading image to Cloudinary:', error);
    throw error;
  }
};

/**
 * Ανακτά εικόνες από το Cloudinary
 * @param folder Ο φάκελος από τον οποίο θα ανακτηθούν οι εικόνες (προαιρετικό)
 * @returns Λίστα με τις εικόνες
 */
export const getImages = async (folder?: string) => {
  try {
    // Ετοιμάζουμε τις παραμέτρους για το API
    const params: any = {
      resource_type: 'image',
      max_results: 100,
    };
    
    if (folder) {
      params.prefix = folder;
      params.type = 'upload';
    }
    
    // Κλήση του API για να πάρουμε τις εικόνες
    const result = await cloudinary.api.resources(params);
    
    return result.resources;
  } catch (error) {
    console.error('Error fetching images from Cloudinary:', error);
    throw error;
  }
};

/**
 * Διαγράφει μια εικόνα από το Cloudinary
 * @param publicId Το public ID της εικόνας
 * @returns Αποτέλεσμα της διαγραφής
 */
export const deleteImage = async (publicId: string) => {
  try {
    return await cloudinary.uploader.destroy(publicId);
  } catch (error) {
    console.error('Error deleting image from Cloudinary:', error);
    throw error;
  }
};

/**
 * Μετατρέπει ένα αρχείο σε base64 string
 * @param file Το αρχείο προς μετατροπή
 * @returns base64 string
 */
const toBase64 = (file: File) => {
  return new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });
};


📄 /Users/panagiotischoliasmenos/aion-cms-main/src/lib/utils/showConfetti.ts
----------------------------
// utils/showConfetti.ts

export function showConfetti() {
  if (typeof window === "undefined") return;

  try {
    const confettiCount = 100;
    const container = document.createElement("div");
    Object.assign(container.style, {
      position: "fixed",
      top: "0",
      left: "0",
      width: "100%",
      height: "100%",
      pointerEvents: "none",
      zIndex: "9999",
    });
    document.body.appendChild(container);

    for (let i = 0; i < confettiCount; i++) {
      const confetti = document.createElement("div");
      Object.assign(confetti.style, {
        position: "absolute",
        width: "10px",
        height: "10px",
        backgroundColor: ["#3b82f6", "#10b981", "#f59e0b", "#ef4444"][Math.floor(Math.random() * 4)],
        borderRadius: "50%",
        top: "0",
        left: `${Math.random() * 100}%`,
      });
      container.appendChild(confetti);

      const animation = confetti.animate(
        [
          { transform: "translate3d(0, 0, 0)", opacity: 1 },
          {
            transform: `translate3d(${Math.random() * 100 - 50}px, ${Math.random() * 600 + 300}px, 0)`,
            opacity: 0,
          },
        ],
        {
          duration: 1200 + Math.random() * 500,
          easing: "cubic-bezier(0,0,0.2,1)",
        }
      );

      animation.onfinish = () => {
        confetti.remove();
        if (container.childElementCount === 0) container.remove();
      };
    }
  } catch (err) {
    console.warn("🎉 Confetti Error:", err);
  }
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/lib/utils/utils.ts
----------------------------
// src/lib/utils.ts
import { ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(...inputs));
}

📄 /Users/panagiotischoliasmenos/aion-cms-main/src/types/index.ts
----------------------------
export interface Category {
    id: string;
    name: string;
    description: string;
    createdAt: string;
    updatedAt: string;
  }